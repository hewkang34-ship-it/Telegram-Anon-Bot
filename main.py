import logging
import os
import asyncio
from typing import Optional
import json
from datetime import datetime, timedelta

from telegram import (
    Update, Message,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ChatMemberHandler, ContextTypes, filters
)

# Redis (async)
from redis.asyncio import Redis

# ========= ENV =========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379")
CHANNEL_ID = int(os.environ.get("CHANNEL_ID", "0"))  # id –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (-100xxxxxxxxxx)

# ========= Redis helpers / Keys =========
redis: Optional[Redis] = None

QUEUE_KEY = "q:global"                 # –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö
PAIR_KEY  = "pair:{uid}"               # –∫–ª—é—á –ø–∞—Ä—ã –¥–ª—è —é–∑–µ—Ä–∞
STAT_MATCH = "stat:matches"
STAT_MSG   = "stat:messages"
PROFILE_KEY = "profile:{uid}"          # JSON: {"gender":"M/F", "age_group":"18-24/25-34/35-44/45+", "vip_until": 0}

# ===== Helpers –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞ =====
async def myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    text = f"–¢–∏–ø: {chat.type}\nID: {chat.id}"
    if getattr(chat, "username", None):
        text += f"\n@{chat.username}"
    await update.effective_message.reply_text(text)

async def on_channel_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    logging.info("CHANNEL_POST -> id=%s title=%s", chat.id, getattr(chat, "title", None))

async def on_my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    logging.info("MY_CHAT_MEMBER -> id=%s title=%s", chat.id, getattr(chat, "title", None))

# ===== –ü—Ä–æ—Ñ–∏–ª–∏ =====
async def load_profile(uid: int) -> dict:
    raw = await redis.get(PROFILE_KEY.format(uid=uid))
    if not raw:
        return {}
    try:
        return json.loads(raw)
    except Exception:
        return {}

async def save_profile(uid: int, data: dict):
    await redis.set(PROFILE_KEY.format(uid=uid), json.dumps(data), ex=30*24*3600)

def is_profile_complete(p: dict) -> bool:
    return bool(p.get("gender") and p.get("age_group"))

async def get_peer(uid: int) -> Optional[int]:
    pid = await redis.get(PAIR_KEY.format(uid=uid))
    return int(pid) if pid else None

async def set_pair(a: int, b: int):
    pipe = redis.pipeline()
    pipe.set(PAIR_KEY.format(uid=a), b, ex=24 * 3600)
    pipe.set(PAIR_KEY.format(uid=b), a, ex=24 * 3600)
    pipe.incr(STAT_MATCH)
    await pipe.execute()

# ===== –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω (inline-–∫–Ω–æ–ø–∫–∏) =====
WELCOME_CARD = (
    "<b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ Telegram</b>\n"
    "–û–±—â–∞–π—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.\n\n"
    "üîç –ù–∞–∂–º–∏ <code>/find</code> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.\n"
    "‚û°Ô∏è <code>/next</code> ‚Äî –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
    "‚õî <code>/stop</code> ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
)

async def send_start_card(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="find")],
        [
            InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next"),
            InlineKeyboardButton("‚õî –°—Ç–æ–ø", callback_data="stop"),
        ],
    ])
    await update.effective_chat.send_message(
        WELCOME_CARD, parse_mode=ParseMode.HTML, reply_markup=kb
    )

# ===== –ö–æ–º–∞–Ω–¥—ã/handlers –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è =====
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await send_start_card(update, ctx)

async def cb_query(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer()
    if q.data == "find":
        await find_cmd(update, ctx, by_button=True)
    elif q.data == "next":
        await next_cmd(update, ctx)
    elif q.data == "stop":
        await stop_cmd(update, ctx)

# ===== VIP =====
def _now() -> int:
    return int(datetime.utcnow().timestamp())

async def is_vip(uid: int) -> bool:
    p = await load_profile(uid)
    return int(p.get("vip_until", 0)) > _now()

async def grant_vip(uid: int, hours: int):
    p = await load_profile(uid)
    p["vip_until"] = _now() + hours * 3600
    await save_profile(uid, p)

async def ensure_vip_or_offer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """True ‚Äî VIP —É–∂–µ –µ—Å—Ç—å. –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ñ—Ñ–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False."""
    uid = update.effective_user.id
    if await is_vip(uid):
        return True

    btns = [
        [InlineKeyboardButton("üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{context.bot.username}")],  # TODO: –∑–∞–º–µ–Ω–∏ URL –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª
        [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="vip:check")],
        [
            InlineKeyboardButton("üí≥ 0.99$ / 1 –º–µ—Å.", callback_data="vip:buy:1m"),
            InlineKeyboardButton("üí≥ 7.99$ / 3 –º–µ—Å.", callback_data="vip:buy:3m"),
            InlineKeyboardButton("üí≥ 4.99$ / 7 –º–µ—Å.", callback_data="vip:buy:7m"),
        ],
    ]
    await update.effective_chat.send_message(
        "üîí –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
        "–ü–æ–ª—É—á–∏—Ç—å VIP –Ω–∞ 3 —á–∞—Å–∞ ‚Äî –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
        "–ò–ª–∏ –∫—É–ø–∏ –ø–æ–¥–ø–∏—Å–∫—É:",
        reply_markup=InlineKeyboardMarkup(btns),
    )
    return False

async def vip_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    data = q.data

    if data == "vip:check":
        if CHANNEL_ID == 0:
            await q.edit_message_text("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω CHANNEL_ID. –£–∫–∞–∂–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è CHANNEL_ID.")
            return
        try:
            member = await context.bot.get_chat_member(CHANNEL_ID, uid)
            if member.status in ("creator", "administrator", "member", "restricted"):
                await grant_vip(uid, 3)  # 3 —á–∞—Å–∞
                await q.edit_message_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! VIP –Ω–∞ 3 —á–∞—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            else:
                await q.edit_message_text("–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å¬ª.")
        except Exception:
            await q.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –∞–¥–º–∏–Ω –≤ –∫–∞–Ω–∞–ª–µ.")
        return

    if data.startswith("vip:buy:"):
        await q.edit_message_text("üí≥ –û–ø–ª–∞—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è VIP –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        return

# ===== –ü–æ–∏—Å–∫ =====
async def clear_pair(uid: int):
    peer = await get_peer(uid)
    pipe = redis.pipeline()
    pipe.delete(PAIR_KEY.format(uid=uid))
    if peer:
        pipe.delete(PAIR_KEY.format(uid=peer))
    await pipe.execute()
    return peer

async def enqueue(uid: int):
    if await get_peer(uid):
        return False
    try:
        await redis.lrem(QUEUE_KEY, 0, str(uid))
    except Exception:
        pass
    await redis.rpush(QUEUE_KEY, uid)
    return True

async def try_match(uid: int) -> Optional[int]:
    while True:
        other = await redis.lpop(QUEUE_KEY)
        if other is None:
            return None
        other = int(other)
        if other == uid:
            continue
        if not await get_peer(other):
            await set_pair(uid, other)
            return other

async def find_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE, by_button: bool = False):
    uid = update.effective_user.id

    peer = await get_peer(uid)
    if peer:
        await update.effective_chat.send_message("–¢—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –ù–∞–ø–∏—à–∏ /next –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ /stop —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
        return

    await enqueue(uid)
    await update.effective_chat.send_message("üîç –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")

    peer = await try_match(uid)
    if peer:
        await update.effective_chat.send_message("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å!")
        await ctx.bot.send_message(peer, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å!")

async def next_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    old_peer = await clear_pair(uid)
    if old_peer:
        await ctx.bot.send_message(old_peer, "üîÅ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª. –ò—â—É —Ç–µ–±–µ –Ω–æ–≤–æ–≥–æ‚Ä¶")
        await enqueue(old_peer)
        new_for_old = await try_match(old_peer)
        if new_for_old:
            await ctx.bot.send_message(old_peer, "‚úÖ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
            await ctx.bot.send_message(new_for_old, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")

    await enqueue(uid)
    await update.effective_chat.send_message("üîÅ –ò—â—É –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")
    new_peer = await try_match(uid)
    if new_peer:
        await update.effective_chat.send_message("‚úÖ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
        await ctx.bot.send_message(new_peer, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")

async def stop_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await clear_pair(uid)
    await update.effective_chat.send_message("‚õî –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ /find, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    if peer:
        await ctx.bot.send_message(peer, "‚õî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –ù–∞–∂–º–∏ /find, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

# –ö–Ω–æ–ø–∫–∏ ‚Äú–ü–æ–∏—Å–∫ –ñ/–ú‚Äù (–µ—Å–ª–∏ —Ä–µ—à–∏—à—å –≤–µ—Ä–Ω—É—Ç—å ReplyKeyboard –º–µ–Ω—é)
async def search_female(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_vip_or_offer(update, context):
        return
    await find_cmd(update, context)

async def search_male(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_vip_or_offer(update, context):
        return
    await find_cmd(update, context)

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
async def relay(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await get_peer(uid)
    if not peer:
        return

    msg: Message = update.effective_message
    await redis.incr(STAT_MSG)

    if msg.text:
        await ctx.bot.send_message(peer, msg.text)
    elif msg.photo:
        await ctx.bot.send_photo(peer, msg.photo[-1].file_id, caption=msg.caption or None)
    elif msg.video:
        await ctx.bot.send_video(peer, msg.video.file_id, caption=msg.caption or None)
    elif msg.voice:
        await ctx.bot.send_voice(peer, msg.voice.file_id, caption=msg.caption or None)
    elif msg.audio:
        await ctx.bot.send_audio(peer, msg.audio.file_id, caption=msg.caption or None)
    elif msg.document:
        await ctx.bot.send_document(peer, msg.document.file_id, caption=msg.caption or None)
    elif msg.sticker:
        await ctx.bot.send_sticker(peer, msg.sticker.file_id)
    elif msg.animation:
        await ctx.bot.send_animation(peer, msg.animation.file_id, caption=msg.caption or None)
    elif msg.video_note:
        await ctx.bot.send_video_note(peer, msg.video_note.file_id)
    elif msg.location:
        await ctx.bot.send_location(peer, msg.location.latitude, msg.location.longitude)
    elif msg.contact:
        await update.effective_chat.send_message("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Ä–∞–¥–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏.")
    else:
        await update.effective_chat.send_message("–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω.")

async def rules(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Äî –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Äî –ó–∞–ø—Ä–µ—â—ë–Ω —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Äî –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: /next, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å: /stop"
    )
    await update.effective_chat.send_message(text)

async def stats(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    m, s = await redis.get(STAT_MATCH), await redis.get(STAT_MSG)
    await update.effective_chat.send_message(f"üìà –ú–∞—Ç—á–µ–π: {int(m or 0)}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {int(s or 0)}")

# ===== MAIN =====
def main():
    if not TOKEN:
        raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    global redis
    redis = Redis.from_url(REDIS_URL, decode_responses=True)

    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("find", find_cmd))
    app.add_handler(CommandHandler("next", next_cmd))
    app.add_handler(CommandHandler("stop", stop_cmd))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("stats", stats))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ VIP-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(vip_cb, pattern="^vip:"))

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ (–µ—Å–ª–∏ –±—É–¥–µ—Ç ReplyKeyboard –º–µ–Ω—é)
    app.add_handler(MessageHandler(filters.Regex(r"^üôã‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫ –ñ$"), search_female))
    app.add_handler(MessageHandler(filters.Regex(r"^üôã‚Äç‚ôÇÔ∏è –ü–æ–∏—Å–∫ –ú$"), search_male))

    # –û–±—â–∏–π callback –¥–ª—è inline-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(cb_query))

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, relay))

    # ===== –ù–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID =====
    app.add_handler(CommandHandler("myid", myid))
    app.add_handler(MessageHandler(filters.UpdateType.CHANNEL_POST, on_channel_post))
    app.add_handler(ChatMemberHandler(on_my_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))

    # –ó–∞–ø—É—Å–∫ ‚Äî –ë–ï–ó await –∏ –ë–ï–ó asyncio.run
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()