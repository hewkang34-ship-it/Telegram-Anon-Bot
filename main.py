import os
import json
import logging
from typing import Optional

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters, PreCheckoutQueryHandler
)

import redis.asyncio as redis

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("anonchat")

TOKEN = os.environ.get("TELEGRAM_TOKEN")
REDIS_URL = os.environ.get("REDIS_URL")  # –Ω–∞–ø—Ä–∏–º–µ—Ä: redis://default:<pass>@<host>:<port>/0

# –ö–∞—Ä—Ç–∏–Ω–∫–∏ (URL). –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —à–ª—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
DIAMOND_IMG_URL = os.environ.get("DIAMOND_IMG_URL", "")
HALO_IMG_URL    = os.environ.get("HALO_IMG_URL", "")

# ===== Redis –∫–ª–∏–µ–Ω—Ç =====
r: Optional[redis.Redis] = None

PROFILE_KEY = "profile:{uid}"   # JSON
PAIR_KEY    = "pair:{uid}"      # int
QUEUE_KEY   = "q:global"        # list

# ====== VIP (Telegram Stars) ======
VIP_KEY        = "vip_until:{uid}"  # int (unix time)
CURRENCY_XTR   = "XTR"              # Telegram Stars
PROVIDER_TOKEN = ""                 # –¥–ª—è Stars ‚Äî –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

VIP_PLANS = {
    "3m":  {"months": 3,  "amount": 1299, "title": "VIP ‚Ä¢ 3 months"},
    "6m":  {"months": 6,  "amount": 2399, "title": "VIP ‚Ä¢ 6 months"},
    "12m": {"months": 12, "amount": 4499, "title": "VIP ‚Ä¢ 12 months"},
}

def vip_k(uid: int) -> str:
    return VIP_KEY.format(uid=uid)

async def get_vip_until(uid: int) -> int:
    val = await r.get(vip_k(uid))
    return int(val) if val else 0

async def is_vip(uid: int) -> bool:
    from time import time as now
    return (await get_vip_until(uid)) > int(now())

async def extend_vip(uid: int, months: int) -> int:
    """–ü—Ä–æ–¥–ª–µ–≤–∞–µ–º VIP: –¥–æ–±–∞–≤–ª—è–µ–º ~30 –¥–Ω–µ–π –∑–∞ –º–µ—Å—è—Ü."""
    from time import time as now
    now_i = int(now())
    current = await get_vip_until(uid)
    base = max(now_i, current)
    new_until = base + int(30 * 24 * 3600 * months)
    await r.set(vip_k(uid), new_until)
    return new_until

# ===== UI =====
def gender_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–ú üôãüèª‚Äç‚ôÇÔ∏è", callback_data="gender:M"),
        InlineKeyboardButton("–ñ üôãüèª‚Äç‚ôÄÔ∏è", callback_data="gender:F"),
    ]])

def age_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("12‚Äì20", callback_data="age:12-20"),
        InlineKeyboardButton("21‚Äì30", callback_data="age:21-30"),
        InlineKeyboardButton("31‚Äì40", callback_data="age:31-40"),
    ]])

def main_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="search:any")],
        [
            InlineKeyboardButton("üôã‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫ –ñ", callback_data="search:f"),
            InlineKeyboardButton("üôã‚Äç‚ôÇÔ∏è –ü–æ–∏—Å–∫ –ú", callback_data="search:m"),
        ],
    ])

def end_dialog_text() -> str:
    return "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—åüòî\n–ù–∞–ø–∏—à–∏—Ç–µ /search —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ."

def profile_str(p: dict) -> str:
    g_map = {"M": "–ú—É–∂—Å–∫–æ–π", "F": "–ñ–µ–Ω—Å–∫–∏–π"}
    g = g_map.get(p.get("gender"), "‚Äî")
    a = p.get("age_range") or "‚Äî"
    return f"–ü–æ–ª: {g}\n–í–æ–∑—Ä–∞—Å—Ç: {a}"

def menu_text(prefix: str = "") -> str:
    return (
        (prefix + "\n" if prefix else "")
        + "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n\n"
        "/search ‚Äî –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/next ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
        "/vip ‚Äî VIP –∏ –æ–ø–ª–∞—Ç–∞ Stars"
    )

# ===== –ü—Ä–æ—Ñ–∏–ª–∏ =====
async def get_profile(uid: int) -> dict:
    raw = await r.get(PROFILE_KEY.format(uid=uid))
    if not raw:
        return {"gender": None, "age_range": None}
    try:
        return json.loads(raw)
    except Exception:
        return {"gender": None, "age_range": None}

async def save_profile(uid: int, data: dict):
    await r.set(PROFILE_KEY.format(uid=uid), json.dumps(data))

async def reset_profile(uid: int):
    await r.delete(PROFILE_KEY.format(uid=uid))

# ===== –ü–∞—Ä—ã =====
async def get_peer(uid: int) -> Optional[int]:
    val = await r.get(PAIR_KEY.format(uid=uid))
    return int(val) if val else None

async def set_pair(a: int, b: int):
    pipe = r.pipeline()
    pipe.set(PAIR_KEY.format(uid=a), b)
    pipe.set(PAIR_KEY.format(uid=b), a)
    await pipe.execute()

async def clear_pair(uid: int):
    peer = await get_peer(uid)
    pipe = r.pipeline()
    pipe.delete(PAIR_KEY.format(uid=uid))
    if peer:
        pipe.delete(PAIR_KEY.format(uid=peer))
    await pipe.execute()

# ===== –û—á–µ—Ä–µ–¥—å =====
async def push_queue(uid: int):
    # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    members = await r.lrange(QUEUE_KEY, 0, -1)
    if str(uid) not in members:
        await r.rpush(QUEUE_KEY, uid)

async def pop_queue() -> Optional[int]:
    val = await r.lpop(QUEUE_KEY)
    return int(val) if val else None

async def remove_from_queue(uid: int):
    await r.lrem(QUEUE_KEY, 0, uid)

# ===== –ê–Ω–∫–µ—Ç–∞ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    p = await get_profile(uid)
    if not p["gender"]:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb())
        return
    if not p["age_range"]:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb())
        return
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚úÖ\n" + profile_str(p))
    await update.message.reply_text(menu_text("–û—Ç–ª–∏—á–Ω–æ!"), reply_markup=main_kb())

async def on_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    _, gender = q.data.split(":", 1)
    p = await get_profile(uid)
    p["gender"] = gender
    await save_profile(uid, p)
    await q.edit_message_text("–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb())

async def on_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    _, age_range = q.data.split(":", 1)
    p = await get_profile(uid)
    p["age_range"] = age_range
    await save_profile(uid, p)
    await q.edit_message_text("–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n\n–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n" + profile_str(p))
    await q.message.reply_text(menu_text("–û—Ç–ª–∏—á–Ω–æ!"), reply_markup=main_kb())

# ===== –ö–æ–º–∞–Ω–¥—ã =====
async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    p = await get_profile(uid)
    await update.message.reply_text("–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n" + profile_str(p), reply_markup=main_kb())

async def cmd_reset_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await reset_profile(uid)
    await clear_pair(uid)
    await remove_from_queue(uid)
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω. –ù–∞–ø–∏—à–∏ /start.")

# ===== –ú–∞—Ç—á–∏–Ω–≥ =====
async def try_match(uid: int) -> Optional[int]:
    """–û–±—ã—á–Ω—ã–π (–¥–ª—è –Ω–µ–≤–∏–ø–æ–≤): –¥–æ—Å—Ç–∞—ë–º –∏–∑ –≥–æ–ª–æ–≤—ã –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ."""
    while True:
        other = await pop_queue()
        if other is None:
            return None
        if other == uid:
            await push_queue(other)
            return None
        # —É–∂–µ –∑–∞–Ω—è—Ç? –∏—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
        if await get_peer(other):
            continue
        return other

async def try_match_vip(uid: int) -> Optional[int]:
    """VIP-–ø–æ–∏—Å–∫: –ø—Ä–æ–±–µ–≥–∞–µ–º –≤—Å—é –æ—á–µ—Ä–µ–¥—å –∏ –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–≥–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ, —É–¥–∞–ª—è—è –µ–≥–æ."""
    members = await r.lrange(QUEUE_KEY, 0, -1)
    for raw in members:
        other = int(raw)
        if other == uid:
            continue
        if await get_peer(other):
            continue
        # —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ other –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        await r.lrem(QUEUE_KEY, 1, other)
        return other
    return None

async def announce_pair(context: ContextTypes.DEFAULT_TYPE, a: int, b: int):
    text = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ. ‚úçÔ∏è\n\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    await context.bot.send_message(chat_id=a, text=text)
    await context.bot.send_message(chat_id=b, text=text)

async def do_search(chat_id: int, uid: int, context: ContextTypes.DEFAULT_TYPE):
    p = await get_profile(uid)
    if not (p.get("gender") and p.get("age_range")):
        await context.bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å: /start")
        return

    if await get_peer(uid):
        await context.bot.send_message(chat_id, "–¢—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ.\n/next ‚Äî –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥")
        return

    # VIP-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º vip-–ø–æ–∏—Å–∫
    peer = None
    if await is_vip(uid):
        peer = await try_match_vip(uid)
    if not peer:
        peer = await try_match(uid)

    if peer:
        await set_pair(uid, peer)
        await announce_pair(context, uid, peer)
    else:
        await push_queue(uid)
        await context.bot.send_message(chat_id, "–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶ ‚è≥\n/stop ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", reply_markup=main_kb())

async def cmd_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await do_search(update.effective_chat.id, update.effective_user.id, context)

async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await get_peer(uid)
    await remove_from_queue(uid)
    if peer:
        await clear_pair(uid)
        try:
            await context.bot.send_message(chat_id=peer, text=end_dialog_text(), reply_markup=main_kb())
        except Exception as e:
            log.error(f"notify peer fail: {e}")
        await update.message.reply_text(end_dialog_text(), reply_markup=main_kb())
    else:
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=main_kb())

async def cmd_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_stop(update, context)
    await cmd_search(update, context)

# ===== –†–µ–ª–µ–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg:
        return
    uid = update.effective_user.id
    peer = await get_peer(uid)
    if not peer:
        return
    try:
        await msg.copy(chat_id=peer)
    except Exception as e:
        log.error(f"relay error: {e}")

# ===== VIP UI =====
def vip_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üíé VIP –Ω–∞ 3 –º–µ—Å ‚Äî {VIP_PLANS['3m']['amount']}‚≠ê",  callback_data="vip_buy:3m")],
        [InlineKeyboardButton(f"üíé VIP –Ω–∞ 6 –º–µ—Å ‚Äî {VIP_PLANS['6m']['amount']}‚≠ê",  callback_data="vip_buy:6m")],
        [InlineKeyboardButton(f"üíé VIP –Ω–∞ 12 –º–µ—Å ‚Äî {VIP_PLANS['12m']['amount']}‚≠ê", callback_data="vip_buy:12m")],
    ])

async def cmd_vip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    until = await get_vip_until(uid)
    from time import time as now
    active = until > int(now())
    left = max(0, until - int(now()))
    days = left // 86400
    hours = (left % 86400) // 3600
    status = "–∞–∫—Ç–∏–≤–µ–Ω ‚úÖ" if active else "–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚ùå"

    caption = (
        f"VIP-—Å—Ç–∞—Ç—É—Å: {status}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {days}d {hours}h\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –∏ —Å—Ç–∞—Ç—å —Å–∞–º—ã–º —è—Ä–∫–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –≤ –±–æ—Ç–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—å VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ 3‚Äì12 –º–µ—Å—è—Ü–µ–≤.\n\n"
        "‚è≥ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ –Ω–∞ 3, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤\n"
        "üß≠ –£ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ: –≤—ã –±—ã—Å—Ç—Ä–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—É\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å–∞:\n"
        f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî {VIP_PLANS['3m']['amount']} Telegram Stars\n"
        f"‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî {VIP_PLANS['6m']['amount']} Telegram Stars\n"
        f"‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî {VIP_PLANS['12m']['amount']} Telegram Stars\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:"
    )
    if DIAMOND_IMG_URL:
        await update.message.reply_photo(DIAMOND_IMG_URL, caption=caption, reply_markup=vip_menu_kb())
    else:
        await update.message.reply_text(caption, reply_markup=vip_menu_kb())

async def cb_vip_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    try:
        _, plan_key = q.data.split(":", 1)
    except Exception:
        await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    plan = VIP_PLANS.get(plan_key)
    if not plan:
        await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    title = plan["title"]
    description = "VIP –¥–æ—Å—Ç—É–ø –¥–ª—è –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ß–∞—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ)."
    payload = f"vip_{plan_key}"
    prices = [LabeledPrice(label=title, amount=plan["amount"])]

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=title,
        description=description,
        payload=payload,
        provider_token=PROVIDER_TOKEN,     # Stars ‚Üí –ø—É—Å—Ç–æ
        currency=CURRENCY_XTR,             # Stars
        prices=prices,
        start_parameter="vip",
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )

async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –î–ª—è Stars ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload or ""
    plan_key = "3m"
    if payload.startswith("vip_"):
        plan_key = payload.split("_", 1)[1] or "3m"
    months = VIP_PLANS.get(plan_key, VIP_PLANS["3m"])["months"]

    uid = update.effective_user.id
    await extend_vip(uid, months)

    text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤)."
    if HALO_IMG_URL:
        await update.message.reply_photo(HALO_IMG_URL, caption=text, reply_markup=main_kb())
    else:
        await update.message.reply_text(text, reply_markup=main_kb())

# ===== –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞/–≤–æ—Ä–æ—Ç–∞ VIP =====
async def show_vip_gate(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üíé.\n\n"
        "–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è VIP-—Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /vip"
    )
    if DIAMOND_IMG_URL:
        await context.bot.send_photo(chat_id, DIAMOND_IMG_URL, caption=text, reply_markup=main_kb())
    else:
        await context.bot.send_message(chat_id, text, reply_markup=main_kb())

async def on_search_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    _, mode = q.data.split(":", 1)  # any | f | m
    chat_id = q.message.chat_id

    if mode == "any":
        await do_search(chat_id, uid, context)
        return

    # f/m ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è VIP; –µ—Å–ª–∏ VIP ‚Äî –ø–æ–∫–∞ —á—Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    if not await is_vip(uid):
        await show_vip_gate(chat_id, context)
        return
    await do_search(chat_id, uid, context)

# ===== post_init –∏ –∑–∞–ø—É—Å–∫ =====
async def post_init(app: Application):
    # –≥–∞—Å–∏–º –≤–µ–±—Ö—É–∫ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis
    await app.bot.delete_webhook(drop_pending_updates=True)

    if not REDIS_URL:
        raise RuntimeError("REDIS_URL is not set (persistent storage required).")

    global r
    r = await redis.from_url(REDIS_URL, decode_responses=True)
    await r.ping()
    log.info("Redis connected OK")

def main():
    if not TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is not set")

    app = Application.builder().token(TOKEN).post_init(post_init).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("profile", cmd_profile))
    app.add_handler(CommandHandler("reset_profile", cmd_reset_profile))
    app.add_handler(CommandHandler("search", cmd_search))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("next", cmd_next))
    app.add_handler(CommandHandler("vip", cmd_vip))

    # –∞–Ω–∫–µ—Ç–∞
    app.add_handler(CallbackQueryHandler(on_gender, pattern=r"^gender:(M|F)$"))
    app.add_handler(CallbackQueryHandler(on_age, pattern=r"^age:(12-20|21-30|31-40)$"))

    # –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    app.add_handler(CallbackQueryHandler(on_search_buttons, pattern=r"^search:(any|f|m)$"))

    # VIP –ø–æ–∫—É–ø–∫–∏ (–∫–Ω–æ–ø–∫–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏)
    app.add_handler(CallbackQueryHandler(cb_vip_buy, pattern=r"^vip_buy:(3m|6m|12m)$"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    # —Ä–µ–ª–µ–∏–º –≤—Å—ë, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥
    app.add_handler(MessageHandler(~filters.COMMAND, relay))

    log.info("Bot starting (run_polling)‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()