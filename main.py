import os
import json
import logging
import re
import time
from typing import Optional

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice,
    ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters, PreCheckoutQueryHandler
)

import redis.asyncio as redis

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("anonchat")

TOKEN = os.environ.get("TELEGRAM_TOKEN")
REDIS_URL = os.environ.get("REDIS_URL")  # redis://default:<pass>@<host>:<port>/0

# –ö–∞—Ä—Ç–∏–Ω–∫–∏ (URL). –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî —à–ª—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.
DIAMOND_IMG_URL = os.environ.get("DIAMOND_IMG_URL", "")
HALO_IMG_URL    = os.environ.get("HALO_IMG_URL", "")

# ===== Redis =====
r: Optional[redis.Redis] = None
PROFILE_KEY = "profile:{uid}"    # JSON
PAIR_KEY    = "pair:{uid}"       # int
QUEUE_KEY   = "q:global"         # list
VIP_KEY     = "vip_until:{uid}"  # int (unix time)
RATES_KEY   = "rates:{uid}"      # list of json {"peer":id,"v":1/-1,"ts":...}
REPORTS_KEY = "reports:{uid}"    # list of json {"peer":id,"reason":str,"ts":...}

# ===== Payments (Telegram Stars) =====
CURRENCY_XTR   = "XTR"
PROVIDER_TOKEN = ""  # Stars ‚Üí –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
VIP_PLANS = {
    "3m":  {"months": 3,  "amount": 1299, "title": "VIP ‚Ä¢ 3 months"},
    "6m":  {"months": 6,  "amount": 2399, "title": "VIP ‚Ä¢ 6 months"},
    "12m": {"months": 12, "amount": 4499, "title": "VIP ‚Ä¢ 12 months"},
}

# ===== Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é) =====
BTN_ANY = "üöÄ –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
BTN_F   = "üôã‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫ –ñ"
BTN_M   = "üôã‚Äç‚ôÇÔ∏è –ü–æ–∏—Å–∫ –ú"

def reply_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[BTN_ANY],[BTN_F, BTN_M]],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞‚Ä¶",
        selective=True,
        is_persistent=True,
    )

def hide_reply_kb() -> ReplyKeyboardRemove:
    return ReplyKeyboardRemove()

def end_dialog_text() -> str:
    return (
        "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—å üòî\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /search —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n\n"
        "https://t.me/AnonymousWrldChatBot"
    )

# ===== –ê–Ω–∫–µ—Ç–∞ UI =====
def gender_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–ú üôãüèª‚Äç‚ôÇÔ∏è", callback_data="gender:M"),
        InlineKeyboardButton("–ñ üôãüèª‚Äç‚ôÄÔ∏è", callback_data="gender:F"),
    ]])

def age_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("12‚Äì20", callback_data="age:12-20"),
        InlineKeyboardButton("21‚Äì30", callback_data="age:21-30"),
        InlineKeyboardButton("31‚Äì40", callback_data="age:31-40"),
    ]])

def profile_str(p: dict) -> str:
    g_map = {"M": "–ú—É–∂—Å–∫–æ–π", "F": "–ñ–µ–Ω—Å–∫–∏–π"}
    g = g_map.get(p.get("gender"), "‚Äî")
    a = p.get("age_range") or "‚Äî"
    return f"–ü–æ–ª: {g}\n–í–æ–∑—Ä–∞—Å—Ç: {a}"

def menu_text_no_vip(prefix: str = "") -> str:
    return (
        (prefix + "\n" if prefix else "")
        + "–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –ø–æ–∏—Å–∫—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n\n"
        "/search ‚Äî –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/next ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    )

# ===== Helpers/VIP =====
def vip_k(uid: int) -> str: return VIP_KEY.format(uid=uid)
async def get_vip_until(uid: int) -> int:
    val = await r.get(vip_k(uid));  return int(val) if val else 0
async def is_vip(uid: int) -> bool: return (await get_vip_until(uid)) > int(time.time())
async def extend_vip(uid: int, months: int) -> int:
    now_i = int(time.time());  base = max(now_i, await get_vip_until(uid))
    new_until = base + int(30*24*3600*months)
    await r.set(vip_k(uid), new_until);  return new_until

# ===== Profiles/Pairs/Queue =====
async def get_profile(uid: int) -> dict:
    raw = await r.get(PROFILE_KEY.format(uid=uid))
    if not raw: return {"gender": None, "age_range": None}
    try: return json.loads(raw)
    except: return {"gender": None, "age_range": None}

async def save_profile(uid: int, data: dict): await r.set(PROFILE_KEY.format(uid=uid), json.dumps(data))
async def reset_profile(uid: int): await r.delete(PROFILE_KEY.format(uid=uid))

async def get_peer(uid: int) -> Optional[int]:
    val = await r.get(PAIR_KEY.format(uid=uid));  return int(val) if val else None
async def set_pair(a: int, b: int):
    pipe = r.pipeline();  pipe.set(PAIR_KEY.format(uid=a), b);  pipe.set(PAIR_KEY.format(uid=b), a);  await pipe.execute()
async def clear_pair(uid: int):
    peer = await get_peer(uid);  pipe = r.pipeline();  pipe.delete(PAIR_KEY.format(uid=uid));  if peer: pipe.delete(PAIR_KEY.format(uid=peer));  await pipe.execute()

async def push_queue(uid: int):
    members = await r.lrange(QUEUE_KEY, 0, -1)
    if str(uid) not in members: await r.rpush(QUEUE_KEY, uid)
async def pop_queue() -> Optional[int]:
    val = await r.lpop(QUEUE_KEY);  return int(val) if val else None
async def remove_from_queue(uid: int): await r.lrem(QUEUE_KEY, 0, uid)

# ===== START / –∞–Ω–∫–µ—Ç–∞ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    p = await get_profile(uid)
    if not p["gender"]:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb());  return
    if not p["age_range"]:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb());  return
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚úÖ\n" + profile_str(p))
    await update.message.reply_text(menu_text_no_vip("–û—Ç–ª–∏—á–Ω–æ!"))  # –±–µ–∑ /vip –∏ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

async def on_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    uid = q.from_user.id;  _, gender = q.data.split(":", 1)
    p = await get_profile(uid);  p["gender"] = gender;  await save_profile(uid, p)
    await q.edit_message_text("–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb())

async def on_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    uid = q.from_user.id;  _, age_range = q.data.split(":", 1)
    p = await get_profile(uid);  p["age_range"] = age_range;  await save_profile(uid, p)
    await q.edit_message_text("–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n\n–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n" + profile_str(p))
    await q.message.reply_text(menu_text_no_vip("–û—Ç–ª–∏—á–Ω–æ!"))

# ===== Matching =====
async def try_match(uid: int) -> Optional[int]:
    while True:
        other = await pop_queue()
        if other is None: return None
        if other == uid: await push_queue(other); return None
        if await get_peer(other): continue
        return other

async def try_match_vip(uid: int) -> Optional[int]:
    members = await r.lrange(QUEUE_KEY, 0, -1)
    for raw in members:
        other = int(raw)
        if other == uid: continue
        if await get_peer(other): continue
        await r.lrem(QUEUE_KEY, 1, other);  return other
    return None

async def announce_pair(context: ContextTypes.DEFAULT_TYPE, a: int, b: int):
    text = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ. ‚úçÔ∏è\n\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    await context.bot.send_message(a, text, reply_markup=hide_reply_kb())
    await context.bot.send_message(b, text, reply_markup=hide_reply_kb())

async def do_search(chat_id: int, uid: int, context: ContextTypes.DEFAULT_TYPE):
    p = await get_profile(uid)
    if not (p.get("gender") and p.get("age_range")):
        await context.bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å: /start");  return
    if await get_peer(uid):
        await context.bot.send_message(chat_id, "–¢—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ.\n/next ‚Äî –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥");  return

    peer = None
    if await is_vip(uid): peer = await try_match_vip(uid)
    if not peer: peer = await try_match(uid)

    if peer:
        await set_pair(uid, peer);  await announce_pair(context, uid, peer)
    else:
        await push_queue(uid);  await context.bot.send_message(chat_id, "–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶ ‚è≥\n/stop ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", reply_markup=hide_reply_kb())

async def cmd_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await do_search(update.effective_chat.id, update.effective_user.id, context)

# ===== –û—Ü–µ–Ω–∫–∞ –∏ –∂–∞–ª–æ–±—ã =====
RATE_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üëçüèª", callback_data="rate:+"), InlineKeyboardButton("üëéüèª", callback_data="rate:-")],
    [InlineKeyboardButton("‚ö†Ô∏è–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report:open")],
])

REPORT_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üì∞ –†–µ–∫–ª–∞–º–∞", callback_data="report:–†–µ–∫–ª–∞–º–∞")],
    [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞", callback_data="report:–ü—Ä–æ–¥–∞–∂–∞")],
    [InlineKeyboardButton("‚õî –†–∞–∑–∂–∏–≥–∞–Ω–∏–µ —Ä–æ–∑–Ω–∏", callback_data="report:–†–∞–∑–∂–∏–≥–∞–Ω–∏–µ —Ä–æ–∑–Ω–∏")],
    [InlineKeyboardButton("üîû –î–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è", callback_data="report:–î–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è")],
    [InlineKeyboardButton("ü™ô –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="report:–ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ")],
    [InlineKeyboardButton("üò° –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", callback_data="report:–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ")],
    [InlineKeyboardButton("üëä –ù–∞—Å–∏–ª–∏–µ", callback_data="report:–ù–∞—Å–∏–ª–∏–µ")],
    [InlineKeyboardButton("üì£ –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ —Å—É–∏—Ü–∏–¥–∞", callback_data="report:–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ —Å—É–∏—Ü–∏–¥–∞")],
    [InlineKeyboardButton("‚ùå –ü–æ—à–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", callback_data="report:–ü–æ—à–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")],
    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="report:back")],
])

async def send_rate_prompt(context: ContextTypes.DEFAULT_TYPE, uid: int):
    txt = "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ –≤–∞—à–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"
    await context.bot.send_message(uid, txt, reply_markup=RATE_MENU)

async def on_rate_or_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    uid = q.from_user.id
    data = q.data

    peer = await get_peer(uid)  # –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—ã—á–Ω–æ None; –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?
    # –î–ª—è –ª–æ–≥–æ–≤ —Å–æ—Ö—Ä–∞–Ω–∏–º —Ç–µ–∫—É—â–µ–≥–æ peer, –µ—Å–ª–∏ –µ—Å—Ç—å
    peer_id = peer if peer else 0

    if data == "report:open":
        await q.edit_message_reply_markup(REPORT_MENU);  return
    if data == "report:back":
        await q.edit_message_reply_markup(RATE_MENU);  return

    if data.startswith("rate:"):
        val = 1 if data.endswith("+") else -1
        rec = {"peer": peer_id, "v": val, "ts": int(time.time())}
        await r.rpush(RATES_KEY.format(uid=uid), json.dumps(rec))
        await q.edit_message_text("–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
        return

    if data.startswith("report:"):
        reason = data.split(":",1)[1]
        rec = {"peer": peer_id, "reason": reason, "ts": int(time.time())}
        await r.rpush(REPORTS_KEY.format(uid=uid), json.dumps(rec))
        await q.edit_message_text("–°–ø–∞—Å–∏–±–æ! –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ö†Ô∏è")
        return

# ===== STOP / NEXT =====
async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await get_peer(uid)
    await remove_from_queue(uid)

    if peer:
        await clear_pair(uid)
        try:
            await context.bot.send_message(peer, end_dialog_text(), reply_markup=reply_menu_kb())
            await send_rate_prompt(context, peer)
        except Exception as e:
            log.error(f"notify peer fail: {e}")

        await update.message.reply_text(end_dialog_text(), reply_markup=reply_menu_kb())
        await send_rate_prompt(context, uid)
    else:
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply_menu_kb())

async def cmd_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_stop(update, context)
    await cmd_search(update, context)

# ===== –†–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg: return
    uid = update.effective_user.id
    peer = await get_peer(uid)
    if not peer: return
    try: await msg.copy(chat_id=peer)
    except Exception as e: log.error(f"relay error: {e}")

# ===== VIP UI / –æ–ø–ª–∞—Ça =====
def vip_menu_inline() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üíé VIP –Ω–∞ 3 –º–µ—Å ‚Äî {VIP_PLANS['3m']['amount']}‚≠ê",  callback_data="vip_buy:3m")],
        [InlineKeyboardButton(f"üíé VIP –Ω–∞ 6 –º–µ—Å ‚Äî {VIP_PLANS['6m']['amount']}‚≠ê",  callback_data="vip_buy:6m")],
        [InlineKeyboardButton(f"üíé VIP –Ω–∞ 12 –º–µ—Å ‚Äî {VIP_PLANS['12m']['amount']}‚≠ê", callback_data="vip_buy:12m")],
    ])

async def cmd_vip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    until = await get_vip_until(uid := update.effective_user.id)
    active = until > int(time.time())
    left = max(0, until - int(time.time()))
    days = left // 86400; hours = (left % 86400) // 3600
    status = "–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚ùå" if not active else "–∞–∫—Ç–∏–≤–µ–Ω ‚úÖ"

    caption = (
        f"VIP-—Å—Ç–∞—Ç—É—Å: {status}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {days}d {hours}h\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –∏ —Å—Ç–∞—Ç—å —Å–∞–º—ã–º —è—Ä–∫–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –≤ –±–æ—Ç–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—å VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ 3‚Äì12 –º–µ—Å—è—Ü–µ–≤.\n\n"
        "‚è≥ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ –Ω–∞ 3, 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤\n"
        "üß≠ –£ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ: –≤—ã –±—ã—Å—Ç—Ä–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–æ–ª—É\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å–∞:\n"
        f"‚Ä¢ 3 –º–µ—Å—è—Ü–∞ ‚Äî {VIP_PLANS['3m']['amount']} Telegram Stars\n"
        f"‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ ‚Äî {VIP_PLANS['6m']['amount']} Telegram Stars\n"
        f"‚Ä¢ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî {VIP_PLANS['12m']['amount']} Telegram Stars\n"
        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ:"
    )
    if DIAMOND_IMG_URL:
        await update.message.reply_photo(DIAMOND_IMG_URL, caption=caption, reply_markup=vip_menu_inline())
    else:
        await update.message.reply_text(caption, reply_markup=vip_menu_inline())

async def cb_vip_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    try: _, plan_key = q.data.split(":", 1)
    except Exception: await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); return
    plan = VIP_PLANS.get(plan_key)
    if not plan: await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); return

    title = plan["title"];  description = "VIP –¥–æ—Å—Ç—É–ø –¥–ª—è –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ß–∞—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ)."
    payload = f"vip_{plan_key}"
    prices = [LabeledPrice(label=title, amount=plan["amount"])]

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=title, description=description, payload=payload,
        provider_token=PROVIDER_TOKEN, currency=CURRENCY_XTR, prices=prices,
        start_parameter="vip", need_name=False, need_phone_number=False,
        need_email=False, need_shipping_address=False, is_flexible=False,
    )

async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    plan_key = sp.invoice_payload.split("_",1)[1] if sp and sp.invoice_payload.startswith("vip_") else "3m"
    months = VIP_PLANS.get(plan_key, VIP_PLANS["3m"])["months"]
    await extend_vip(update.effective_user.id, months)
    text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–∞! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –Ω–∞ {months} –º–µ—Å—è—Ü(–µ–≤)."
    if HALO_IMG_URL: await update.message.reply_photo(HALO_IMG_URL, caption=text, reply_markup=reply_menu_kb())
    else: await update.message.reply_text(text, reply_markup=reply_menu_kb())

# –í–æ—Ä–æ—Ç–∞ VIP –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ñ/–ú
async def show_vip_gate(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    text = "–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üíé.\n\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è VIP-—Å—Ç–∞—Ç—É—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /vip"
    if DIAMOND_IMG_URL: await context.bot.send_photo(chat_id, DIAMOND_IMG_URL, caption=text)
    else: await context.bot.send_message(chat_id, text)

# ===== /link ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É =====
async def cmd_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await get_peer(uid)
    if not peer:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç: /search")
        return
    user = update.effective_user
    if user.username:
        url = f"https://t.me/{user.username}"
        text = f"üëã –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ—é —Å—Å—ã–ª–∫—É: {url}"
    else:
        url = f"tg://user?id={uid}"
        text = f"üëã –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å (–±–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è): {url}"
    await context.bot.send_message(peer, text)
    await update.message.reply_text("–°—Å—ã–ª–∫—É –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É ‚úÖ")

# ===== –ö–Ω–æ–ø–∫–∏ Reply (–Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é) =====
async def on_btn_any(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await do_search(update.effective_chat.id, update.effective_user.id, context)
async def on_btn_f(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_vip(update.effective_user.id):
        await show_vip_gate(update.effective_chat.id, context);  return
    await do_search(update.effective_chat.id, update.effective_user.id, context)
async def on_btn_m(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_vip(update.effective_user.id):
        await show_vip_gate(update.effective_chat.id, context);  return
    await do_search(update.effective_chat.id, update.effective_user.id, context)

# ===== –ü—Ä–æ—á–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥ –º–µ–Ω—é =====
async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìú –ü—Ä–∞–≤–∏–ª–∞: —É–≤–∞–∂–∞–π—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –Ω–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –∑–∞–∫–æ–Ω—ã, –±–µ–∑ —Å–ø–∞–º–∞ –∏ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. –ó–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–µ–Ω –±–∞–Ω.")
async def cmd_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –ø–æ–ª/–≤–æ–∑—Ä–∞—Å—Ç –º–µ–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ /start (–∑–∞–Ω–æ–≤–æ –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏-–∞–Ω–∫–µ—Ç—ã). –¢–µ—Ö–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —Å–∫–æ—Ä–æ.")
async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫/–∂–∞–ª–æ–±
    uid = update.effective_user.id
    rates = await r.llen(RATES_KEY.format(uid=uid))
    reports = await r.llen(REPORTS_KEY.format(uid=uid))
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ ‚Äî {rates}, –∂–∞–ª–æ–±—ã ‚Äî {reports}.")
async def cmd_myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{update.effective_user.id}</code>", parse_mode="HTML")

# ===== post_init / –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é =====
async def post_init(app: Application):
    await app.bot.delete_webhook(drop_pending_updates=True)
    if not REDIS_URL: raise RuntimeError("REDIS_URL is not set (persistent storage required).")

    global r
    r = await redis.from_url(REDIS_URL, decode_responses=True);  await r.ping()
    log.info("Redis connected OK")

    # –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ (–∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω–µ 2, –∏—Å–∫–ª—é—á–∞—è interests/help/paysupport)
    commands = [
        BotCommand("start", "üîÑ –ù–∞—á–∞—Ç—å"),
        BotCommand("search", "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
        BotCommand("next", "üÜï –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
        BotCommand("stop", "‚õî –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º"),
        BotCommand("vip", "üíé –°—Ç–∞—Ç—å VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"),
        BotCommand("link", "üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É"),
        BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand("rules", "üìñ –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"),
        BotCommand("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("myid", "üÜî –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"),
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: ¬´–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É¬ª –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ /pay ‚Üí –æ—Ç–∫—Ä–æ–µ–º VIP-–≥–µ–π—Ç
        BotCommand("pay", "üë©‚Äç‚ù§Ô∏è‚Äçüë® –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É"),
    ]
    await app.bot.set_my_commands(commands)

# ===== Application =====
def main():
    if not TOKEN: raise RuntimeError("TELEGRAM_TOKEN is not set")
    app = Application.builder().token(TOKEN).post_init(post_init).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", cmd_search))
    app.add_handler(CommandHandler("next", cmd_next))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("vip", cmd_vip))
    app.add_handler(CommandHandler("link", cmd_link))
    app.add_handler(CommandHandler("rules", cmd_rules))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.add_handler(CommandHandler("settings", cmd_settings))
    # /pay = ¬´–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É¬ª: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ—Ä–æ—Ç–∞ VIP (–∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ –Ω–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏)
    async def cmd_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await is_vip(update.effective_user.id):
            await show_vip_gate(update.effective_chat.id, context)
        else:
            await update.message.reply_text("–£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω VIP. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∏–∂–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ ¬´–ü–æ–∏—Å–∫ –ñ/–ú¬ª.", reply_markup=reply_menu_kb())
    app.add_handler(CommandHandler("pay", cmd_pay))

    # –ê–Ω–∫–µ—Ç–∞ (–∏–Ω–ª–∞–π–Ω)
    app.add_handler(CallbackQueryHandler(on_gender, pattern=r"^gender:(M|F)$"))
    app.add_handler(CallbackQueryHandler(on_age, pattern=r"^age:(12-20|21-30|31-40)$"))

    # VIP –ø–æ–∫—É–ø–∫–∏ (–∏–Ω–ª–∞–π–Ω + –ø–ª–∞—Ç–µ–∂–∏)
    app.add_handler(CallbackQueryHandler(cb_vip_buy, pattern=r"^vip_buy:(3m|6m|12m)$"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    # –û—Ü–µ–Ω–∫–∏/–∂–∞–ª–æ–±—ã
    app.add_handler(CallbackQueryHandler(on_rate_or_report, pattern=r"^(rate:\+|rate:-|report:.*)$"))

    # –ö–Ω–æ–ø–∫–∏ Reply (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ)
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_ANY)}$"), on_btn_any))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_F)}$"),   on_btn_f))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_M)}$"),   on_btn_m))

    # –†–µ–ª–µ–∏–Ω–≥ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    ignore = (
        filters.COMMAND
        | filters.Regex(f"^{re.escape(BTN_ANY)}$")
        | filters.Regex(f"^{re.escape(BTN_F)}$")
        | filters.Regex(f"^{re.escape(BTN_M)}$")
    )
    app.add_handler(MessageHandler(~ignore, relay))

    log.info("Bot starting (run_polling)‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()