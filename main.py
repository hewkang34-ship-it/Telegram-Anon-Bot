import os
import json
import logging
import re
import time
from typing import Optional

from telegram import (
    Update, InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice,
    ReplyKeyboardMarkup, ReplyKeyboardRemove, BotCommand
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ContextTypes, filters, PreCheckoutQueryHandler
)

import redis.asyncio as redis

logging.basicConfig(level=logging.INFO, format="%(asctime)s | %(levelname)s | %(message)s")
log = logging.getLogger("anonchat")

TOKEN = os.environ.get("TELEGRAM_TOKEN")
REDIS_URL = os.environ.get("REDIS_URL")  # redis://default:<pass>@<host>:<port>/0

DIAMOND_IMG_URL = os.environ.get("DIAMOND_IMG_URL", "")
HALO_IMG_URL    = os.environ.get("HALO_IMG_URL", "")

# ===== Redis =====
r: Optional[redis.Redis] = None
PROFILE_KEY = "profile:{uid}"
PAIR_KEY    = "pair:{uid}"
QUEUE_KEY   = "q:global"
VIP_KEY     = "vip_until:{uid}"
PREMIUM_KEY = "premium_until:{uid}"
RATES_KEY   = "rates:{uid}"
REPORTS_KEY = "reports:{uid}"
USERS_SET   = "users"  # –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# ===== Payments (Telegram Stars) =====
CURRENCY_XTR   = "XTR"
PROVIDER_TOKEN = ""  # Stars ‚Üí –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

# VIP (12 –º–µ—Å—è—Ü–µ–≤)
VIP_PLANS = {
    "12m": {"months": 12, "amount": 5000, "title": "üíé VIP ‚Ä¢ 12 months"},
}
# PREMIUM (—Ç–µ–∫—Å—Ç—ã –≤–∫–ª—é—á–∞—é—Ç ‚ÇΩ/$ —á–∏—Å—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
PREMIUM_PLANS = {
    "7d":  {"days": 7,    "amount": 150,  "title": "–ü—Ä–µ–º–∏—É–º ‚Ä¢ 7 –¥–Ω–µ–π",  "price_line": "7 –¥–Ω–µ–π –∑–∞ 150 ‚≠ê / 199‚ÇΩ / $1.99"},
    "1m":  {"months": 1,  "amount": 250,  "title": "–ü—Ä–µ–º–∏—É–º ‚Ä¢ 1 –º–µ—Å—è—Ü", "price_line": "1 –º–µ—Å—è—Ü –∑–∞ 250 ‚≠ê / 399‚ÇΩ / $3.99"},
    "12m": {"months": 12, "amount": 1000, "title": "–ü—Ä–µ–º–∏—É–º ‚Ä¢ 1 –≥–æ–¥",   "price_line": "1 –≥–æ–¥ –∑–∞ 1000 ‚≠ê / 1999‚ÇΩ / $19.99"},
}

# ===== Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∫–Ω–æ–ø–∫–∞ ¬´–∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏¬ª) =====
BTN_ANY = "üöÄ –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
BTN_F   = "üôã‚Äç‚ôÄÔ∏è –ü–æ–∏—Å–∫ –ñ"
BTN_M   = "üôã‚Äç‚ôÇÔ∏è –ü–æ–∏—Å–∫ –ú"

def reply_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[BTN_ANY],[BTN_F, BTN_M]],
        resize_keyboard=True,
        one_time_keyboard=False,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞‚Ä¶",
        selective=True,
    )

def hide_reply_kb() -> ReplyKeyboardRemove:
    return ReplyKeyboardRemove()

def end_dialog_text() -> str:
    return (
        "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–∫–æ–Ω—á–∏–ª —Å –≤–∞–º–∏ —Å–≤—è–∑—å üòî\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ /search —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ\n\n"
        "https://t.me/AnonymousWrldChatBot"
    )

# ===== –ê–Ω–∫–µ—Ç–∞ UI =====
def gender_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–ú üôãüèª‚Äç‚ôÇÔ∏è", callback_data="gender:M"),
        InlineKeyboardButton("–ñ üôãüèª‚Äç‚ôÄÔ∏è", callback_data="gender:F"),
    ]])

def age_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("12‚Äì20", callback_data="age:12-20"),
        InlineKeyboardButton("21‚Äì30", callback_data="age:21-30"),
        InlineKeyboardButton("31‚Äì40", callback_data="age:31-40"),
    ]])

def settings_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üë®‚Äçü¶± –ü–æ–ª üë©‚Äçü¶±", callback_data="settings:gender")],
        [InlineKeyboardButton("üìÖ –í–æ–∑—Ä–∞—Å—Ç", callback_data="settings:age")],
    ])

def profile_str(p: dict) -> str:
    g_map = {"M": "–ú—É–∂—Å–∫–æ–π", "F": "–ñ–µ–Ω—Å–∫–∏–π"}
    g = g_map.get(p.get("gender"), "‚Äî")
    a = p.get("age_range") or "‚Äî"
    return f"–ü–æ–ª: {g}\n–í–æ–∑—Ä–∞—Å—Ç: {a}"

# ===== Users counter =====
async def add_user(uid: int):
    try:
        await r.sadd(USERS_SET, uid)
    except Exception as e:
        log.warning(f"SADD users failed: {e}")

async def users_count() -> int:
    try:
        return await r.scard(USERS_SET)
    except Exception:
        return 0

def menu_text_base(users_total: int, prefix: str = "") -> str:
    top = f"–°–µ–π—á–∞—Å –≤ —á–∞—Ç–µ {users_total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•"
    body = (
        "/search ‚Äî –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/next ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ —Å—Ä–∞–∑—É –∂–µ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º"
    )
    return (prefix + "\n" if prefix else "") + top + "\n\n" + body

# ===== Helpers: VIP / PREMIUM =====
def vip_k(uid: int) -> str: return VIP_KEY.format(uid=uid)
def premium_k(uid: int) -> str: return PREMIUM_KEY.format(uid=uid)

async def _get_until(key: str) -> int:
    val = await r.get(key)
    return int(val) if val else 0

async def get_vip_until(uid: int) -> int:
    return await _get_until(vip_k(uid))

async def get_premium_until(uid: int) -> int:
    return await _get_until(premium_k(uid))

async def is_vip(uid: int) -> bool:
    return (await get_vip_until(uid)) > int(time.time())

async def is_premium(uid: int) -> bool:
    return (await get_premium_until(uid)) > int(time.time())

async def has_gender_rights(uid: int) -> bool:
    # –ü—Ä–∞–≤–æ –∏—Å–∫–∞—Ç—å –ø–æ –ø–æ–ª—É ‚Äî —É –ü—Ä–µ–º–∏—É–º–∞ –ò–õ–ò —É VIP
    return (await is_premium(uid)) or (await is_vip(uid))

def _add_months_or_days(base_ts: int, months: int = 0, days: int = 0) -> int:
    # months -> 30 –¥–Ω–µ–π —É—Å–ª–æ–≤–Ω–æ
    return base_ts + int(days*24*3600 + months*30*24*3600)

async def extend_vip(uid: int, months: int) -> int:
    now_i = int(time.time())
    base = max(now_i, await get_vip_until(uid))
    new_until = _add_months_or_days(base, months=months)
    await r.set(vip_k(uid), new_until)
    return new_until

async def extend_premium(uid: int, months: int = 0, days: int = 0) -> int:
    now_i = int(time.time())
    base = max(now_i, await get_premium_until(uid))
    new_until = _add_months_or_days(base, months=months, days=days)
    await r.set(premium_k(uid), new_until)
    return new_until

# ===== Profiles/Pairs/Queue =====
async def get_profile(uid: int) -> dict:
    raw = await r.get(PROFILE_KEY.format(uid=uid))
    if not raw:
        return {"gender": None, "age_range": None}
    try:
        return json.loads(raw)
    except Exception:
        return {"gender": None, "age_range": None}

async def save_profile(uid: int, data: dict): await r.set(PROFILE_KEY.format(uid=uid), json.dumps(data))
async def reset_profile(uid: int): await r.delete(PROFILE_KEY.format(uid=uid))

async def get_peer(uid: int) -> Optional[int]:
    val = await r.get(PAIR_KEY.format(uid=uid))
    return int(val) if val else None

async def set_pair(a: int, b: int):
    pipe = r.pipeline()
    pipe.set(PAIR_KEY.format(uid=a), b)
    pipe.set(PAIR_KEY.format(uid=b), a)
    await pipe.execute()

async def clear_pair(uid: int):
    peer = await get_peer(uid)
    pipe = r.pipeline()
    pipe.delete(PAIR_KEY.format(uid=uid))
    if peer:
        pipe.delete(PAIR_KEY.format(uid=peer))
    await pipe.execute()

async def push_queue(uid: int):
    members = await r.lrange(QUEUE_KEY, 0, -1)
    if str(uid) not in members:
        await r.rpush(QUEUE_KEY, uid)
async def pop_queue() -> Optional[int]:
    val = await r.lpop(QUEUE_KEY)
    return int(val) if val else None
async def remove_from_queue(uid: int): await r.lrem(QUEUE_KEY, 0, uid)

# ===== START / –∞–Ω–∫–µ—Ç–∞ =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    await add_user(uid)
    p = await get_profile(uid)
    if not p["gender"]:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb());  return
    if not p["age_range"]:
        await update.message.reply_text("–£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb());  return

    total = await users_count()
    await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω ‚úÖ\n" + profile_str(p))
    await update.message.reply_text(menu_text_base(total, "–û—Ç–ª–∏—á–Ω–æ!"), reply_markup=reply_menu_kb())

# callbacks –∞–Ω–∫–µ—Ç—ã
async def on_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    uid = q.from_user.id;  _, gender = q.data.split(":", 1)
    p = await get_profile(uid);  p["gender"] = gender;  await save_profile(uid, p)
    await q.edit_message_text("–ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb())

async def on_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    uid = q.from_user.id;  _, age_range = q.data.split(":", 1)
    p = await get_profile(uid);  p["age_range"] = age_range;  await save_profile(uid, p)
    total = await users_count()
    await q.edit_message_text("–í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚úÖ\n\n–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n" + profile_str(p))
    await q.message.reply_text(menu_text_base(total, "–û—Ç–ª–∏—á–Ω–æ!"), reply_markup=reply_menu_kb())

# ===== Matching =====
async def try_match(uid: int) -> Optional[int]:
    while True:
        other = await pop_queue()
        if other is None: return None
        if other == uid:
            await push_queue(other)
            return None
        if await get_peer(other):  # —É–∂–µ –∑–∞–Ω—è—Ç
            continue
        return other

async def try_match_priority(uid: int) -> Optional[int]:
    # –î–ª—è –ø—Ä–µ–º/–≤–∏–ø ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—á–µ—Ä–µ–¥–∏
    members = await r.lrange(QUEUE_KEY, 0, -1)
    for raw in members:
        other = int(raw)
        if other == uid: continue
        if await get_peer(other): continue
        await r.lrem(QUEUE_KEY, 1, other)
        return other
    return None

async def announce_pair(context: ContextTypes.DEFAULT_TYPE, a: int, b: int):
    text = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ú–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ. ‚úçÔ∏è\n\n/next ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    await context.bot.send_message(a, text, reply_markup=hide_reply_kb())
    await context.bot.send_message(b, text, reply_markup=hide_reply_kb())

async def do_search(chat_id: int, uid: int, context: ContextTypes.DEFAULT_TYPE):
    p = await get_profile(uid)
    if not (p.get("gender") and p.get("age_range")):
        await context.bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏ –ø—Ä–æ—Ñ–∏–ª—å: /start");  return
    if await get_peer(uid):
        await context.bot.send_message(chat_id, "–¢—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ.\n/next ‚Äî –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥");  return

    peer = None
    if await has_gender_rights(uid):
        peer = await try_match_priority(uid)
    if not peer:
        peer = await try_match(uid)

    if peer:
        await set_pair(uid, peer);  await announce_pair(context, uid, peer)
    else:
        await push_queue(uid)
        await context.bot.send_message(chat_id, "–ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶ ‚è≥\n/stop ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", reply_markup=hide_reply_kb())

async def cmd_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await add_user(update.effective_user.id)
    await do_search(update.effective_chat.id, update.effective_user.id, context)

# ===== –û—Ü–µ–Ω–∫–∞ –∏ –∂–∞–ª–æ–±—ã =====
RATE_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üëçüèª", callback_data="rate:+"), InlineKeyboardButton("üëéüèª", callback_data="rate:-")],
    [InlineKeyboardButton("‚ö†Ô∏è–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data="report:open")],
])
REPORT_MENU = InlineKeyboardMarkup([
    [InlineKeyboardButton("üì∞ –†–µ–∫–ª–∞–º–∞", callback_data="report:–†–µ–∫–ª–∞–º–∞")],
    [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–∞–∂–∞", callback_data="report:–ü—Ä–æ–¥–∞–∂–∞")],
    [InlineKeyboardButton("‚õî –†–∞–∑–∂–∏–≥–∞–Ω–∏–µ —Ä–æ–∑–Ω–∏", callback_data="report:–†–∞–∑–∂–∏–≥–∞–Ω–∏–µ —Ä–æ–∑–Ω–∏")],
    [InlineKeyboardButton("üîû –î–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è", callback_data="report:–î–µ—Ç—Å–∫–∞—è –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—è")],
    [InlineKeyboardButton("ü™ô –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="report:–ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ")],
    [InlineKeyboardButton("üò° –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", callback_data="report:–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ")],
    [InlineKeyboardButton("üëä –ù–∞—Å–∏–ª–∏–µ", callback_data="report:–ù–∞—Å–∏–ª–∏–µ")],
    [InlineKeyboardButton("üì£ –ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ —Å—É–∏—Ü–∏–¥–∞", callback_data="report:–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ —Å—É–∏—Ü–∏–¥–∞")],
    [InlineKeyboardButton("‚ùå –ü–æ—à–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫", callback_data="report:–ü–æ—à–ª—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫")],
    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="report:back")],
])

async def send_rate_prompt(context: ContextTypes.DEFAULT_TYPE, uid: int):
    txt = "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –º–Ω–µ–Ω–∏–µ –æ –≤–∞—à–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –≤–∞–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"
    await context.bot.send_message(uid, txt, reply_markup=RATE_MENU)

async def on_rate_or_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    uid = q.from_user.id
    data = q.data
    peer = await get_peer(uid)
    peer_id = peer if peer else 0

    if data == "report:open":
        await q.edit_message_reply_markup(REPORT_MENU);  return
    if data == "report:back":
        await q.edit_message_reply_markup(RATE_MENU);  return

    if data.startswith("rate:"):
        val = 1 if data.endswith("+") else -1
        rec = {"peer": peer_id, "v": val, "ts": int(time.time())}
        await r.rpush(RATES_KEY.format(uid=uid), json.dumps(rec))
        await q.edit_message_text("–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ");  return

    if data.startswith("report:"):
        reason = data.split(":",1)[1]
        rec = {"peer": peer_id, "reason": reason, "ts": int(time.time())}
        await r.rpush(REPORTS_KEY.format(uid=uid), json.dumps(rec))
        await q.edit_message_text("–°–ø–∞—Å–∏–±–æ! –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚ö†Ô∏è");  return

# ===== STOP / NEXT =====
async def cmd_stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await get_peer(uid)
    await remove_from_queue(uid)

    if peer:
        await clear_pair(uid)
        try:
            await context.bot.send_message(peer, end_dialog_text(), reply_markup=reply_menu_kb())
            await send_rate_prompt(context, peer)
        except Exception as e:
            log.error(f"notify peer fail: {e}")

        await update.message.reply_text(end_dialog_text(), reply_markup=reply_menu_kb())
        await send_rate_prompt(context, uid)
    else:
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.", reply_markup=reply_menu_kb())

async def cmd_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_stop(update, context)
    await cmd_search(update, context)

# ===== –†–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π =====
async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg: return
    uid = update.effective_user.id
    await add_user(uid)
    peer = await get_peer(uid)
    if not peer: return
    try: await msg.copy(chat_id=peer)
    except Exception as e: log.error(f"relay error: {e}")

# ===== VIP / PREMIUM UI –∏ –æ–ø–ª–∞—Ç–∞ =====
def vip_menu_inline() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üíé VIP –∑–∞ {VIP_PLANS['12m']['amount']}‚≠ê / 6999‚ÇΩ / $69", callback_data="vip_buy:12m")]
    ])

def premium_menu_inline() -> InlineKeyboardMarkup:
    rows = [
        [InlineKeyboardButton(PREMIUM_PLANS["7d"]["price_line"],  callback_data="premium_buy:7d")],
        [InlineKeyboardButton(PREMIUM_PLANS["1m"]["price_line"],  callback_data="premium_buy:1m")],
        [InlineKeyboardButton(PREMIUM_PLANS["12m"]["price_line"], callback_data="premium_buy:12m")],
        [InlineKeyboardButton("üíé –°—Ç–∞—Ç—å VIP", callback_data="open_vip")],
    ]
    return InlineKeyboardMarkup(rows)

def fmt_until(ts: int) -> str:
    if not ts: return "‚Äî"
    import datetime as dt
    d = dt.datetime.fromtimestamp(ts)
    return d.strftime("%d.%m.%Y")

async def send_vip_page(chat_id: int, uid: int, context: ContextTypes.DEFAULT_TYPE):
    until = await get_vip_until(uid)
    active = until > int(time.time())
    left = max(0, until - int(time.time()))
    days = left // 86400; hours = (left % 86400) // 3600
    status = "–Ω–µ –∞–∫—Ç–∏–≤–µ–Ω ‚ùå" if not active else f"–∞–∫—Ç–∏–≤–µ–Ω –¥–æ {fmt_until(until)} ‚úÖ"

    caption = (
        f"VIP-—Å—Ç–∞—Ç—É—Å: {status}\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {days}d {hours}h\n\n"
        "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–µ–ª–∏—Ç—å—Å—è –∏ —Å—Ç–∞—Ç—å —Å–∞–º—ã–º —è—Ä–∫–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º –≤ –±–æ—Ç–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ç–∞—Ç—å VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤\n\n"
        "‚è≥ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–µ–º–∏—É–º-–∞–∫–∫–∞—É–Ω—Ç –≤ –±–æ—Ç–µ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤\n"
        "üß≠ –£ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –µ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ: –≤—ã –±—ã—Å—Ç—Ä–µ–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±—É–¥–µ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –ø–æ–ª—É\n"
        "üíé –ö–∞–∂–¥—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–≤–∏–¥–∏—Ç –≤–∞—à VIP-—Å—Ç–∞—Ç—É—Å –∏ –ø—Ä–æ—è–≤–∏—Ç –±–æ–ª—å—à–∏–π –∏–Ω—Ç–µ—Ä–µ—Å\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å VIP-—Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ ‚Äî {VIP_PLANS['12m']['amount']} Telegram Stars / 6999‚ÇΩ / $69\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:"
    )
    if DIAMOND_IMG_URL:
        await context.bot.send_photo(chat_id, DIAMOND_IMG_URL, caption=caption, reply_markup=vip_menu_inline())
    else:
        await context.bot.send_message(chat_id, caption, reply_markup=vip_menu_inline())

async def cmd_vip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_vip_page(update.effective_chat.id, update.effective_user.id, context)

async def cb_open_vip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞–ª–æ
    try:
        await q.edit_message_reply_markup(None)
    except Exception:
        pass
    await send_vip_page(q.message.chat_id, q.from_user.id, context)

async def cb_vip_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    try: _, plan_key = q.data.split(":", 1)
    except Exception: await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); return
    plan = VIP_PLANS.get(plan_key)
    if not plan: await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); return

    title = plan["title"];  description = "VIP –¥–æ—Å—Ç—É–ø –¥–ª—è –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ß–∞—Ç–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –ø–æ–∏—Å–∫–µ)."
    payload = f"vip_{plan_key}"
    prices = [LabeledPrice(label=title, amount=plan["amount"])]

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=title, description=description, payload=payload,
        provider_token=PROVIDER_TOKEN, currency=CURRENCY_XTR, prices=prices,
        start_parameter="vip", need_name=False, need_phone_number=False,
        need_email=False, need_shipping_address=False, is_flexible=False,
    )

# ===== –ü—Ä–µ–º–∏—É–º =====
def premium_text_no(active: bool) -> str:
    return (
        "–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –ø–æ –ø–æ–ª—É. –ü—Ä–∏–æ–±—Ä–µ—Ç–∞—è –ø—Ä–µ–º–∏—É–º, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n\n"
        "üìå –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É\n"
        "üë© –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∏—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–µ–≤—É—à–µ–∫ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –ø–∞—Ä–Ω–µ–π\n\n"
        "üìå –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
        "‚ôæÔ∏è –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–ª—É—á–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –≤ –¥–µ–Ω—å\n\n"
        "üìå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∫–ª–∞–º—ã\n"
        "üì≤ –ú—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
        "üìå –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —á–∞—Ç–∞\n"
        "üéÅ –ß–µ–º –±–æ–ª—å—à–µ –≤—ã –Ω–∞—Å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ, —Ç–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –º—ã –≤–Ω–µ–¥—Ä–∏–º, –±—É–¥–µ–º –ª—É—á—à–µ –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç –∏ –ø–æ–∫—É–ø–∞—Ç—å –±–æ–ª—å—à–µ —Ä–µ–∫–ª–∞–º—ã –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤\n\n"
        "üíé –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º VIP-—Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∑–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /vip\n\n"
        "–ß—Ç–æ–±—ã " + ("–ø—Ä–æ–¥–ª–∏—Ç—å" if active else "–∫—É–ø–∏—Ç—å") + " –ø—Ä–µ–º–∏—É–º, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:"
    )

async def cmd_pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    prem_until = await get_premium_until(uid)
    active = prem_until > int(time.time())
    if not active:
        text = premium_text_no(False)
    else:
        text = (
            f"‚ùó –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–µ–º–∏—É–º –¥–æ {fmt_until(prem_until)}\n\n" +
            premium_text_no(True)
        )
    await update.message.reply_text(text, reply_markup=premium_menu_inline())

async def cb_premium_buy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query;  await q.answer()
    try: _, plan_key = q.data.split(":", 1)
    except Exception: await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); return
    plan = PREMIUM_PLANS.get(plan_key)
    if not plan: await q.edit_message_text("–ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."); return

    title = plan["title"];  description = "–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –¥–ª—è –ê–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ß–∞—Ç–∞ (–ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É, –±–µ–∑–ª–∏–º–∏—Ç, –Ω–µ—Ç —Ä–µ–∫–ª–∞–º—ã)."
    payload = f"premium_{plan_key}"
    prices = [LabeledPrice(label=title, amount=plan["amount"])]

    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title=title, description=description, payload=payload,
        provider_token=PROVIDER_TOKEN, currency=CURRENCY_XTR, prices=prices,
        start_parameter="premium", need_name=False, need_phone_number=False,
        need_email=False, need_shipping_address=False, is_flexible=False,
    )

# ===== –û–±—â–∏–π pre-checkout / —É—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ =====
async def precheckout_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sp = update.message.successful_payment
    payload = sp.invoice_payload if sp else ""
    uid = update.effective_user.id

    if payload.startswith("vip_"):
        plan_key = payload.split("_",1)[1]
        months = VIP_PLANS.get(plan_key, VIP_PLANS["12m"])["months"]
        await extend_vip(uid, months)
        text = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ VIP-—Å—Ç–∞—Ç—É—Å–∞! –ê–∫—Ç–∏–≤–µ–Ω –¥–æ {fmt_until(await get_vip_until(uid))}."
    elif payload.startswith("premium_"):
        plan_key = payload.split("_",1)[1]
        plan = PREMIUM_PLANS.get(plan_key, PREMIUM_PLANS["1m"])
        months = plan.get("months", 0)
        days = plan.get("days", 0)
        await extend_premium(uid, months=months, days=days)
        text = f"–°–ø–∞—Å–∏–±–æ! –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {fmt_until(await get_premium_until(uid))}. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É."
    else:
        text = "–û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞."

    if HALO_IMG_URL: await update.message.reply_photo(HALO_IMG_URL, caption=text, reply_markup=reply_menu_kb())
    else: await update.message.reply_text(text, reply_markup=reply_menu_kb())

# ===== /link ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É =====
async def cmd_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await get_peer(uid)
    if not peer:
        await update.message.reply_text("–í—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç: /search")
        return
    user = update.effective_user
    if user.username:
        url = f"https://t.me/{user.username}"
    else:
        url = f"tg://user?id={uid}"

    # –°–æ–±–µ—Å–µ–¥–Ω–∏–∫—É ‚Äî –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ ¬´–°—Å—ã–ª–∫–∞¬ª
    peer_text = f"üëã –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: [–°—Å—ã–ª–∫–∞]({url})"
    await context.bot.send_message(peer, peer_text, parse_mode="Markdown")
    # –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")

# ===== –î–æ–ø. –∫–æ–º–∞–Ω–¥—ã =====
async def cmd_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ:\nanonchat.io/rules")

async def cmd_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=settings_menu_kb())

async def on_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query; await q.answer()
    _, what = q.data.split(":", 1)
    if what == "gender":
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:", reply_markup=gender_kb())
    elif what == "age":
        await q.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=age_kb())

async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    rates = await r.llen(RATES_KEY.format(uid=uid))
    reports = await r.llen(REPORTS_KEY.format(uid=uid))
    total = await users_count()
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –≤–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ ‚Äî {rates}, –∂–∞–ª–æ–±—ã ‚Äî {reports}.\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}")

async def cmd_myid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"üÜî ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: <code>{update.effective_user.id}</code>", parse_mode="HTML")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ\n\n"
        "–ë–æ—Ç —É–º–µ–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–∏—Ñ–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "/search ‚Äî –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/next ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ —Å—Ä–∞–∑—É –∂–µ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/stop ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º\n"
        "/pay ‚Äî –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–æ–º\n"
        "/vip ‚Äî —Å—Ç–∞—Ç—å VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\n"
        "/link ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—Å –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ\n"
        "/settings ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π –ø–æ–ª –∏ –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/rules ‚Äî –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏"
    )
    await update.message.reply_text(text)

async def cmd_paysupport(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ: –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–∫—É–ø–∫–æ–π –ü—Ä–µ–º–∏—É–º–∞/VIP ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @Support (–∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ).")

# ===== Reply-–∫–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–Ω—É–∂–Ω—ã –î–û main) =====
async def show_premium_gate(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    text = "–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ü—Ä–µ–º–∏—É–º/üíéVIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n–û—Ñ–æ—Ä–º–∏—Ç—å ‚Äî /pay\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ VIP ‚Äî /vip"
    if DIAMOND_IMG_URL: await context.bot.send_photo(chat_id, DIAMOND_IMG_URL, caption=text)
    else: await context.bot.send_message(chat_id, text)

async def on_btn_any(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await do_search(update.effective_chat.id, update.effective_user.id, context)

async def on_btn_f(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await has_gender_rights(update.effective_user.id):
        await show_premium_gate(update.effective_chat.id, context);  return
    await do_search(update.effective_chat.id, update.effective_user.id, context)

async def on_btn_m(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await has_gender_rights(update.effective_user.id):
        await show_premium_gate(update.effective_chat.id, context);  return
    await do_search(update.effective_chat.id, update.effective_user.id, context)

# ===== post_init / –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ =====
async def post_init(app: Application):
    await app.bot.delete_webhook(drop_pending_updates=True)
    if not REDIS_URL:
        raise RuntimeError("REDIS_URL is not set")

    global r
    r = await redis.from_url(REDIS_URL, decode_responses=True)
    await r.ping()
    log.info("Redis connected OK")

    try:
        commands = [
            BotCommand("start", "üîÑ –ù–∞—á–∞—Ç—å"),
            BotCommand("search", "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
            BotCommand("next", "üÜï –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ –∏ –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"),
            BotCommand("stop", "‚õî –ó–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥ —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º"),
            BotCommand("help", "üÜò –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
            BotCommand("pay", "üë©‚Äç‚ù§Ô∏è‚Äçüë® –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É / –ü—Ä–µ–º–∏—É–º"),
            BotCommand("paysupport", "üí∞ –ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ"),
            BotCommand("vip", "üíé –°—Ç–∞—Ç—å VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"),
            BotCommand("link", "üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É"),
            BotCommand("settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∞, –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ —Ç–µ—Ö. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"),
            BotCommand("rules", "üìã –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"),
            BotCommand("stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
            BotCommand("myid", "üÜî –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"),
        ]
        await app.bot.set_my_commands(commands)
    except Exception as e:
        log.warning(f"set_my_commands failed: {e}")

# ===== Application =====
def main():
    if not TOKEN:
        raise RuntimeError("TELEGRAM_TOKEN is not set")
    app = Application.builder().token(TOKEN).post_init(post_init).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("search", cmd_search))
    app.add_handler(CommandHandler("next", cmd_next))
    app.add_handler(CommandHandler("stop", cmd_stop))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("pay", cmd_pay))
    app.add_handler(CommandHandler("paysupport", cmd_paysupport))
    app.add_handler(CommandHandler("vip", cmd_vip))
    app.add_handler(CommandHandler("link", cmd_link))
    app.add_handler(CommandHandler("rules", cmd_rules))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("myid", cmd_myid))
    app.add_handler(CommandHandler("settings", cmd_settings))

    # –ò–Ω–ª–∞–π–Ω –∫–æ–ª–ª–±—ç–∫–∏
    app.add_handler(CallbackQueryHandler(on_gender, pattern=r"^gender:(M|F)$"))
    app.add_handler(CallbackQueryHandler(on_age, pattern=r"^age:(12-20|21-30|31-40)$"))
    app.add_handler(CallbackQueryHandler(on_settings, pattern=r"^settings:(gender|age)$"))
    app.add_handler(CallbackQueryHandler(cb_open_vip, pattern=r"^open_vip$"))

    # –ü–æ–∫—É–ø–∫–∏
    app.add_handler(CallbackQueryHandler(cb_vip_buy, pattern=r"^vip_buy:(12m)$"))
    app.add_handler(CallbackQueryHandler(cb_premium_buy, pattern=r"^premium_buy:(7d|1m|12m)$"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))

    # –û—Ü–µ–Ω–∫–∏/–∂–∞–ª–æ–±—ã
    app.add_handler(CallbackQueryHandler(on_rate_or_report, pattern=r"^(rate:\+|rate:-|report:.*)$"))

    # –ö–Ω–æ–ø–∫–∏ Reply (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ)
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_ANY)}$"), on_btn_any))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_F)}$"),   on_btn_f))
    app.add_handler(MessageHandler(filters.Regex(f"^{re.escape(BTN_M)}$"),   on_btn_m))

    # –†–µ–ª–µ–∏–Ω–≥ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
    ignore = (
        filters.COMMAND
        | filters.Regex(f"^{re.escape(BTN_ANY)}$")
        | filters.Regex(f"^{re.escape(BTN_F)}$")
        | filters.Regex(f"^{re.escape(BTN_M)}$")
    )
    app.add_handler(MessageHandler(~ignore, relay))

    log.info("Bot starting (run_polling)‚Ä¶")
    app.run_polling()

if __name__ == "__main__":
    main()