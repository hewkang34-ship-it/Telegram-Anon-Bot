import os
import asyncio
from collections import deque
from typing import Dict, Optional

from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
)

TOKEN = os.getenv("TELEGRAM_TOKEN")

# –û—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—ã
waiting_queue = deque()            # deque[chat_id]
pairs: Dict[int, int] = {}         # chat_id -> partner_chat_id

# ---------- –í—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ----------

async def safe_send(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    try:
        await context.bot.sendMessage(chat_id, text, parse_mode=ParseMode.HTML)
    except Exception:
        pass

def partner_of(chat_id: int) -> Optional[int]:
    return pairs.get(chat_id)

def unlink(chat_id: int):
    partner = pairs.pop(chat_id, None)
    if partner is not None:
        pairs.pop(partner, None)

async def match_if_possible(context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ –¥–≤–æ–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    while len(waiting_queue) >= 2:
        a = waiting_queue.popleft()
        b = waiting_queue.popleft()
        pairs[a] = b
        pairs[b] = a
        await safe_send(context, a,
                        "üéØ <b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: <i>–§–ª–∏—Ä—Ç</i>\n\n"
                        "<b>/next</b> ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ\n"
                        "<b>/stop</b> ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n")
        await safe_send(context, b,
                        "üéØ <b>–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                        "–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: <i>–§–ª–∏—Ä—Ç</i>\n\n"
                        "<b>/next</b> ‚Äî –∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ\n"
                        "<b>/stop</b> ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n")

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id

    # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–∫–∞–∫ ¬´—ç–∫—Ä–∞–Ω¬ª)
    welcome = (
        "üîí <b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ Telegram</b>\n"
        "–û–±—â–∞–π—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.\n\n"
        "üîé <i>–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –æ–±—â–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏‚Ä¶</i>"
    )
    await update.message.reply_text(
        welcome,
        parse_mode=ParseMode.HTML,
        reply_markup=ReplyKeyboardRemove()
    )

    # –ï—Å–ª–∏ —É–∂–µ –≤ –ø–∞—Ä–µ ‚Äî —Ä–∞–∑—Ä—ã–≤–∞–µ–º
    if partner_of(chat_id):
        unlink(chat_id)

    # –ï—Å–ª–∏ —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if chat_id not in waiting_queue:
        waiting_queue.append(chat_id)

    await match_if_possible(context)

async def next_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    partner = partner_of(chat_id)

    if partner:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –∏ —Ä–∞–∑—Ä—ã–≤–∞–µ–º
        await safe_send(context, partner, "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª –∏ –∏—â–µ—Ç –Ω–æ–≤–æ–≥–æ (/next).")
        unlink(chat_id)

    await update.message.reply_text("üîé –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")
    if chat_id not in waiting_queue:
        waiting_queue.append(chat_id)
    await match_if_possible(context)

async def stop_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    partner = partner_of(chat_id)
    if partner:
        await safe_send(context, partner, "‚õî –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º.")
        unlink(chat_id)
    await update.message.reply_text("‚úîÔ∏è –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

async def interests_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º. –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ üòâ"
    )

# ---------- –†–æ—É—Ç–∏–Ω–≥ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ----------

async def relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    partner = partner_of(chat_id)
    if not partner:
        # –ù–µ –≤ –ø–∞—Ä–µ ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º –∫–æ–º–∞–Ω–¥—É
        await update.message.reply_text("–ü–æ–∫–∞ —Ç—ã –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    if update.message.text:
        await safe_send(context, partner, update.message.text)

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã/–≥–æ–ª–æ—Å–∞/—Ñ–æ—Ç–æ –ø–æ-–ø—Ä–æ—Å—Ç–æ–º—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if update.message.sticker:
        await context.bot.send_sticker(partner, update.message.sticker.file_id)
    if update.message.voice:
        await context.bot.send_voice(partner, update.message.voice.file_id)
    if update.message.photo:
        await context.bot.send_photo(partner, update.message.photo[-1].file_id)
    if update.message.animation:
        await context.bot.send_animation(partner, update.message.animation.file_id)

# ---------- –ó–∞–ø—É—Å–∫ ----------

async def on_startup(app):
    print("Bot started")

def main():
    if not TOKEN:
        raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")

    application = ApplicationBuilder().token(TOKEN).post_init(on_startup).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("next", next_cmd))
    application.add_handler(CommandHandler("stop", stop_cmd))
    application.add_handler(CommandHandler("interests", interests_cmd))

    # –í—Å–µ –ø—Ä–æ—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, relay))

    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()