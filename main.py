import os
import asyncio
from typing import Optional

from telegram import (
    Update, Message,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# Redis (async)
from redis.asyncio import Redis

# ========= ENV =========
TOKEN = os.environ.get("TELEGRAM_TOKEN")
REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379")

# ========= Redis helpers / Keys =========
redis: Optional[Redis] = None

QUEUE_KEY = "q:global"                 # –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞—é—â–∏—Ö
PAIR_KEY  = "pair:{uid}"               # –∫–ª—é—á –ø–∞—Ä—ã –¥–ª—è —é–∑–µ—Ä–∞
STAT_MATCH = "stat:matches"
STAT_MSG   = "stat:messages"


async def get_peer(uid: int) -> Optional[int]:
    pid = await redis.get(PAIR_KEY.format(uid=uid))
    return int(pid) if pid else None


async def set_pair(a: int, b: int):
    pipe = redis.pipeline()
    pipe.set(PAIR_KEY.format(uid=a), b, ex=24 * 3600)
    pipe.set(PAIR_KEY.format(uid=b), a, ex=24 * 3600)
    pipe.incr(STAT_MATCH)
    await pipe.execute()


async def clear_pair(uid: int):
    peer = await get_peer(uid)
    pipe = redis.pipeline()
    pipe.delete(PAIR_KEY.format(uid=uid))
    if peer:
        pipe.delete(PAIR_KEY.format(uid=peer))
    await pipe.execute()
    return peer


async def enqueue(uid: int):
    # –µ—Å–ª–∏ —É–∂–µ –≤ –ø–∞—Ä–µ ‚Äî –Ω–µ —Å—Ç–∞–≤–∏–º
    if await get_peer(uid):
        return False
    # —É–¥–∞–ª–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏
    try:
        await redis.lrem(QUEUE_KEY, 0, str(uid))
    except Exception:
        pass
    await redis.rpush(QUEUE_KEY, uid)
    return True


async def try_match(uid: int) -> Optional[int]:
    # –∏—â–µ–º –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    while True:
        other = await redis.lpop(QUEUE_KEY)
        if other is None:
            return None
        other = int(other)
        if other == uid:
            continue
        if not await get_peer(other):
            await set_pair(uid, other)
            return other


# ========= UI =========
WELCOME_CARD = (
    "<b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –≤ Telegram</b>\n"
    "–û–±—â–∞–π—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.\n\n"
    "üîç –ù–∞–∂–º–∏ <code>/find</code> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.\n"
    "‚û°Ô∏è <code>/next</code> ‚Äî –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫\n"
    "‚õî <code>/stop</code> ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥\n"
)

async def send_start_card(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="find")],
        [
            InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π", callback_data="next"),
            InlineKeyboardButton("‚õî –°—Ç–æ–ø", callback_data="stop"),
        ],
    ])
    await update.effective_chat.send_message(
        WELCOME_CARD, parse_mode=ParseMode.HTML, reply_markup=kb
    )


# ========= Handlers =========
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await send_start_card(update, ctx)


async def cb_query(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer()
    if q.data == "find":
        await find_cmd(update, ctx, by_button=True)
    elif q.data == "next":
        await next_cmd(update, ctx)
    elif q.data == "stop":
        await stop_cmd(update, ctx)


async def find_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE, by_button: bool = False):
    uid = update.effective_user.id

    # —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ?
    peer = await get_peer(uid)
    if peer:
        await update.effective_chat.send_message(
            "–¢—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ. –ù–∞–ø–∏—à–∏ /next –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–ª–∏ /stop —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å."
        )
        return

    await enqueue(uid)
    await update.effective_chat.send_message("üîç –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")

    # –ø—Ä–æ–±—É–µ–º –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ —Å–º–∞—Ç—á–∏—Ç—å
    peer = await try_match(uid)
    if peer:
        await update.effective_chat.send_message("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å!")
        await ctx.bot.send_message(peer, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å!")


async def next_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id

    # –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
    old_peer = await clear_pair(uid)
    if old_peer:
        await ctx.bot.send_message(old_peer, "üîÅ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª. –ò—â—É —Ç–µ–±–µ –Ω–æ–≤–æ–≥–æ‚Ä¶")
        await enqueue(old_peer)
        new_for_old = await try_match(old_peer)
        if new_for_old:
            await ctx.bot.send_message(old_peer, "‚úÖ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
            await ctx.bot.send_message(new_for_old, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")

    # –∏—â–µ–º –Ω–æ–≤–æ–≥–æ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await enqueue(uid)
    await update.effective_chat.send_message("üîÅ –ò—â—É –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")
    new_peer = await try_match(uid)
    if new_peer:
        await update.effective_chat.send_message("‚úÖ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
        await ctx.bot.send_message(new_peer, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")


async def stop_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await clear_pair(uid)
    await update.effective_chat.send_message(
        "‚õî –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ /find, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    )
    if peer:
        await ctx.bot.send_message(
            peer, "‚õî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –ù–∞–∂–º–∏ /find, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )


async def relay(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."""
    uid = update.effective_user.id
    peer = await get_peer(uid)
    if not peer:
        return

    msg: Message = update.effective_message
    await redis.incr(STAT_MSG)

    if msg.text:
        await ctx.bot.send_message(peer, msg.text)
    elif msg.photo:
        await ctx.bot.send_photo(peer, msg.photo[-1].file_id, caption=msg.caption or None)
    elif msg.video:
        await ctx.bot.send_video(peer, msg.video.file_id, caption=msg.caption or None)
    elif msg.voice:
        await ctx.bot.send_voice(peer, msg.voice.file_id, caption=msg.caption or None)
    elif msg.audio:
        await ctx.bot.send_audio(peer, msg.audio.file_id, caption=msg.caption or None)
    elif msg.document:
        await ctx.bot.send_document(peer, msg.document.file_id, caption=msg.caption or None)
    elif msg.sticker:
        await ctx.bot.send_sticker(peer, msg.sticker.file_id)
    elif msg.animation:
        await ctx.bot.send_animation(peer, msg.animation.file_id, caption=msg.caption or None)
    elif msg.video_note:
        await ctx.bot.send_video_note(peer, msg.video_note.file_id)
    elif msg.location:
        await ctx.bot.send_location(peer, msg.location.latitude, msg.location.longitude)
    elif msg.contact:
        await update.effective_chat.send_message(
            "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ —Ä–∞–¥–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏."
        )
    else:
        await update.effective_chat.send_message("–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω.")


async def rules(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Äî –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Äî –ó–∞–ø—Ä–µ—â—ë–Ω —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Äî –î–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: /next, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å: /stop"
    )
    await update.effective_chat.send_message(text)


async def stats(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    m, s = await redis.get(STAT_MATCH), await redis.get(STAT_MSG)
    await update.effective_chat.send_message(
        f"üìà –ú–∞—Ç—á–µ–π: {int(m or 0)}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {int(s or 0)}"
    )


# ========= Main =========
async def main():
    if not TOKEN:
        raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    global redis
    redis = Redis.from_url(REDIS_URL, decode_responses=True)

    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("find", find_cmd))
    app.add_handler(CommandHandler("next", next_cmd))
    app.add_handler(CommandHandler("stop", stop_cmd))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("stats", stats))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(cb_query))

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, relay))

    # –ó–∞–ø—É—Å–∫ (PTB v20)
    await app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    asyncio.run(main())