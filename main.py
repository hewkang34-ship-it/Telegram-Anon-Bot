# main.py
import os
import asyncio
import time
from typing import Optional

from telegram import (
    Update, Message,
    InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, CallbackQueryHandler,
    filters
)

# Redis (async)
from redis.asyncio import Redis

# ====== ENV ======
TOKEN = os.environ.get("TELEGRAM_TOKEN")
REDIS_URL = os.environ.get("REDIS_URL", "redis://localhost:6379")
CHANNEL_ID = os.environ.get("CHANNEL_ID")  # –¥–ª—è VIP-–ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏

# ====== Redis keys ======
redis: Optional[Redis] = None

K_Q_GLOBAL = "q:global"                      # –æ–±—â–∞—è –æ—á–µ—Ä–µ–¥—å
K_Q_GIRLS  = "q:gender:f"
K_Q_BOYS   = "q:gender:m"

K_PAIR  = "pair:{uid}"                       # —Ç–µ–∫—É—â–∞—è –ø–∞—Ä–∞
K_USER  = "user:{uid}"                       # –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (hash)

K_STAT_MATCH = "stat:matches"
K_STAT_MSG   = "stat:messages"

# ====== –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ ======
AGE_GROUPS = ["12-20", "21-30", "31-40"]
GENDERS = {"m": "–ú—É–∂—Å–∫–æ–π", "f": "–ñ–µ–Ω—Å–∫–∏–π"}

# ====== —É—Ç–∏–ª–∏—Ç—ã Redis ======
async def get_peer(uid: int) -> Optional[int]:
    pid = await redis.get(K_PAIR.format(uid=uid))
    return int(pid) if pid else None

async def set_pair(a: int, b: int):
    pipe = redis.pipeline()
    pipe.set(K_PAIR.format(uid=a), b, ex=24 * 3600)
    pipe.set(K_PAIR.format(uid=b), a, ex=24 * 3600)
    pipe.incr(K_STAT_MATCH)
    await pipe.execute()

async def clear_pair(uid: int):
    peer = await get_peer(uid)
    pipe = redis.pipeline()
    pipe.delete(K_PAIR.format(uid=uid))
    if peer:
        pipe.delete(K_PAIR.format(uid=peer))
    await pipe.execute()
    return peer

async def in_any_queue_remove(uid: int):
    # —É–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã
    try:
        await redis.lrem(K_Q_GLOBAL, 0, str(uid))
        await redis.lrem(K_Q_GIRLS, 0, str(uid))
        await redis.lrem(K_Q_BOYS, 0, str(uid))
    except Exception:
        pass

async def enqueue(uid: int, queue_key: str):
    # –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤ –ø–∞—Ä–µ
    if await get_peer(uid):
        return False
    await in_any_queue_remove(uid)
    await redis.rpush(queue_key, uid)
    return True

async def try_match_from(queue_key: str, uid: int) -> Optional[int]:
    # –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ —É–∂–µ –æ–∂–∏–¥–∞–µ—Ç
    while True:
        other = await redis.lpop(queue_key)
        if other is None:
            return None
        other = int(other)
        if other == uid:
            continue
        if not await get_peer(other):
            await set_pair(uid, other)
            return other

# –ø—Ä–æ—Ñ–∏–ª—å –∏ VIP
async def get_profile(uid: int) -> dict:
    data = await redis.hgetall(K_USER.format(uid=uid))
    # redis –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å—ë –∫–∞–∫ str
    return data or {}

async def set_profile(uid: int, **fields):
    key = K_USER.format(uid=uid)
    await redis.hset(key, mapping={k: str(v) for k, v in fields.items()})

async def is_vip(uid: int) -> bool:
    prof = await get_profile(uid)
    until = float(prof.get("vip_until", "0"))
    return until > time.time()

async def grant_vip_hours(uid: int, hours: float):
    until = time.time() + hours * 3600
    await set_profile(uid, vip_until=until)

# ====== —Ç–µ–∫—Å—Ç—ã/–∫–Ω–æ–ø–∫–∏ ======
WELCOME_CARD = (
    "<b>–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç</b>\n"
    "–û–±—â–∞–π—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª –∏ –≤–æ–∑—Ä–∞—Å—Ç ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø–æ–¥–±–æ—Ä."
)

def kb_gender():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender:f"),
            InlineKeyboardButton("üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender:m"),
        ]
    ])

def kb_age():
    rows = []
    row = []
    for i, g in enumerate(AGE_GROUPS, start=1):
        row.append(InlineKeyboardButton(g, callback_data=f"age:{g}"))
        if i % 3 == 0:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    return InlineKeyboardMarkup(rows)

def kb_main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöÄ –ü–æ–∏—Å–∫ –ª—é–±–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data="menu:find_any")],
        [
            InlineKeyboardButton("üë© –ü–æ–∏—Å–∫ –ñ", callback_data="menu:find_f"),
            InlineKeyboardButton("üë® –ü–æ–∏—Å–∫ –ú", callback_data="menu:find_m"),
        ],
    ])

def kb_vip():
    buttons = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (3 —á VIP)", callback_data="vip:check_sub")],
        [
            InlineKeyboardButton("üí≥ 0,99$ / 1 –º–µ—Å.", callback_data="vip:buy_1"),
            InlineKeyboardButton("üí≥ 4,99$ / 7 –º–µ—Å.", callback_data="vip:buy_7"),
            InlineKeyboardButton("üí≥ 7,99$ / 3 –º–µ—Å.", callback_data="vip:buy_3"),
        ],
    ]
    # –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–∞–Ω–∞–ª ‚Äî –¥–æ–±–∞–≤–∏–º URL –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    if CHANNEL_ID and isinstance(CHANNEL_ID, str) and CHANNEL_ID.startswith("@"):
        buttons.insert(0, [InlineKeyboardButton("üîî –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_ID.lstrip('@')}")])
    return InlineKeyboardMarkup(buttons)

# ====== HELPER: –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ ======
async def ensure_profile(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    prof = await get_profile(uid)
    gender = prof.get("gender")
    age = prof.get("age")

    if not gender:
        await update.effective_chat.send_message(
            WELCOME_CARD, parse_mode=ParseMode.HTML, reply_markup=kb_gender()
        )
        return False
    if not age:
        await update.effective_chat.send_message("–í—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb_age())
        return False

    await update.effective_chat.send_message(
        "–ì–æ—Ç–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", reply_markup=kb_main_menu()
    )
    return True

# ====== HANDLERS ======
async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await ensure_profile(update, ctx)

async def cb(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    uid = q.from_user.id
    await q.answer()

    data = q.data or ""

    # –û–Ω–±–æ—Ä–¥–∏–Ω–≥: –ø–æ–ª
    if data.startswith("gender:"):
        g = data.split(":", 1)[1]
        if g not in ("m", "f"):
            return
        await set_profile(uid, gender=g)
        await q.edit_message_text(f"–ü–æ–ª: {GENDERS[g]}")
        await q.message.chat.send_message("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=kb_age())
        return

    # –û–Ω–±–æ—Ä–¥–∏–Ω–≥: –≤–æ–∑—Ä–∞—Å—Ç
    if data.startswith("age:"):
        a = data.split(":", 1)[1]
        if a not in AGE_GROUPS:
            return
        await set_profile(uid, age=a)
        await q.edit_message_text(f"–í–æ–∑—Ä–∞—Å—Ç: {a}")
        await q.message.chat.send_message("–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞:", reply_markup=kb_main_menu())
        return

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "menu:find_any":
        await find_any(update, ctx)
        return

    if data in ("menu:find_f", "menu:find_m"):
        # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É —Ç–æ–ª—å–∫–æ –¥–ª—è VIP
        if not await is_vip(uid):
            await q.message.chat.send_message(
                "–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
                "‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏ VIP –Ω–∞ 3 —á–∞—Å–∞\n"
                "‚Ä¢ –ò–ª–∏ –æ—Ñ–æ—Ä–º–∏ –ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É",
                reply_markup=kb_vip()
            )
            return
        # VIP –µ—Å—Ç—å ‚Üí —Å—Ç–∞–≤–∏–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ—á–µ—Ä–µ–¥—å
        target = "f" if data.endswith("_f") else "m"
        await find_by_gender(update, ctx, target)
        return

    # VIP: –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if data == "vip:check_sub":
        if not CHANNEL_ID:
            await q.message.chat.send_message("–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (CHANNEL_ID). –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω—É.")
            return
        try:
            member = await ctx.bot.get_chat_member(CHANNEL_ID, uid)
            if member.status in ("member", "administrator", "creator"):
                await grant_vip_hours(uid, 3)
                await q.message.chat.send_message("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞. VIP –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 —á–∞—Å–∞!")
                await q.message.chat.send_message("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é:", reply_markup=kb_main_menu())
            else:
                await q.message.chat.send_message("‚ùå –Ø –Ω–µ –≤–∏–∂—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.")
        except Exception:
            await q.message.chat.send_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π –∏ –±–æ—Ç ‚Äî –∞–¥–º–∏–Ω.")
        return

    # VIP: –æ–ø—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã ‚Äî –∑–¥–µ—Å—å –∑–∞–≥–ª—É—à–∫–∏
    if data.startswith("vip:buy_"):
        plan = data.split("_", 1)[1]
        await q.message.chat.send_message(
            "–û–ø–ª–∞—Ç–∞ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.\n"
            "–ú–æ–≥—É –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π VIP (–¥–µ–º–æ) –Ω–∞ 3 —á–∞—Å–∞.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–µ–º–æ VIP 3 —á–∞—Å–∞", callback_data="vip:demo")]
            ])
        )
        return

    if data == "vip:demo":
        await grant_vip_hours(uid, 3)
        await q.message.chat.send_message("üéÅ –î–µ–º–æ-VIP –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 3 —á–∞—Å–∞.")
        await q.message.chat.send_message("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ–Ω—é:", reply_markup=kb_main_menu())
        return

# –ö–æ–º–∞–Ω–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –¥—É–±–ª–∏—Ä—É—é—Ç –º–µ–Ω—é)
async def find_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    await find_any(update, ctx)

async def next_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    old_peer = await clear_pair(uid)
    if old_peer:
        await ctx.bot.send_message(old_peer, "üîÅ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤—ã—à–µ–ª. –ò—â—É –Ω–æ–≤–æ–≥–æ‚Ä¶")
        await enqueue(old_peer, K_Q_GLOBAL)
        # –ø—Ä–æ–±—É–µ–º —Å–º–∞—Ç—á–∏—Ç—å –æ—Å–≤–æ–±–æ–¥–∏–≤—à–µ–≥–æ—Å—è
        new_peer_for_old = await try_match_from(K_Q_GLOBAL, old_peer)
        if new_peer_for_old:
            await ctx.bot.send_message(old_peer, "‚úÖ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
            await ctx.bot.send_message(new_peer_for_old, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")

    await enqueue(uid, K_Q_GLOBAL)
    await update.effective_chat.send_message("üîÅ –ò—â—É –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")
    new_peer = await try_match_from(K_Q_GLOBAL, uid)
    if new_peer:
        await update.effective_chat.send_message("‚úÖ –ù–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
        await ctx.bot.send_message(new_peer, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")

async def stop_cmd(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await clear_pair(uid)
    await update.effective_chat.send_message("‚õî –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–∂–º–∏ /find, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=kb_main_menu())
    if peer:
        await ctx.bot.send_message(peer, "‚õî –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥. –ù–∞–∂–º–∏ /find, —á—Ç–æ–±—ã –∏—Å–∫–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

async def rules(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìú –ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Äî –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
        "‚Äî –ó–∞–ø—Ä–µ—â—ë–Ω —Å–ø–∞–º, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –∏ –Ω–µ–ª–µ–≥–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
        "‚Äî /next ‚Äî –Ω–æ–≤—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, /stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥"
    )
    await update.effective_chat.send_message(text)

async def stats(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    m = await redis.get(K_STAT_MATCH)
    s = await redis.get(K_STAT_MSG)
    await update.effective_chat.send_message(
        f"üìà –ú–∞—Ç—á–µ–π: {int(m or 0)}\n‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–π: {int(s or 0)}"
    )

# –†–µ–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫
async def find_any(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    prof = await get_profile(uid)
    if not (prof.get("gender") and prof.get("age")):
        await ensure_profile(update, ctx)
        return

    if await get_peer(uid):
        await update.effective_chat.send_message("–¢—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ. /next ‚Äî –Ω–æ–≤—ã–π, /stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
        return

    await enqueue(uid, K_Q_GLOBAL)
    await update.effective_chat.send_message("üîç –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞‚Ä¶")
    peer = await try_match_from(K_Q_GLOBAL, uid)
    if peer:
        await update.effective_chat.send_message("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
        await ctx.bot.send_message(peer, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")

async def find_by_gender(update: Update, ctx: ContextTypes.DEFAULT_TYPE, target_gender: str):
    uid = update.effective_user.id
    my_prof = await get_profile(uid)
    if not (my_prof.get("gender") and my_prof.get("age")):
        await ensure_profile(update, ctx)
        return

    if await get_peer(uid):
        await update.effective_chat.send_message("–¢—ã —É–∂–µ –≤ –¥–∏–∞–ª–æ–≥–µ. /next ‚Äî –Ω–æ–≤—ã–π, /stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å.")
        return

    queue_key = K_Q_GIRLS if target_gender == "f" else K_Q_BOYS
    await enqueue(uid, queue_key)
    await update.effective_chat.send_message(
        f"üîç –ò—â—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ –ø–æ–ª—É: { '–ñ' if target_gender=='f' else '–ú' }‚Ä¶"
    )

    # –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –º–∞—Ç—á –∏–∑ –Ω—É–∂–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
    peer = await try_match_from(queue_key, uid)
    if peer:
        await update.effective_chat.send_message("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")
        await ctx.bot.send_message(peer, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω. –ü–∏—à–∏!")

# –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def relay(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    peer = await get_peer(uid)
    if not peer:
        return
    msg: Message = update.effective_message
    await redis.incr(K_STAT_MSG)

    if msg.text:
        await ctx.bot.send_message(peer, msg.text)
    elif msg.photo:
        await ctx.bot.send_photo(peer, photo=msg.photo[-1].file_id, caption=msg.caption or None)
    elif msg.video:
        await ctx.bot.send_video(peer, video=msg.video.file_id, caption=msg.caption or None)
    elif msg.voice:
        await ctx.bot.send_voice(peer, voice=msg.voice.file_id, caption=msg.caption or None)
    elif msg.audio:
        await ctx.bot.send_audio(peer, audio=msg.audio.file_id, caption=msg.caption or None)
    elif msg.document:
        await ctx.bot.send_document(peer, document=msg.document.file_id, caption=msg.caption or None)
    elif msg.sticker:
        await ctx.bot.send_sticker(peer, msg.sticker.file_id)
    elif msg.animation:
        await ctx.bot.send_animation(peer, animation=msg.animation.file_id, caption=msg.caption or None)
    elif msg.video_note:
        await ctx.bot.send_video_note(peer, video_note=msg.video_note.file_id)
    elif msg.location:
        await ctx.bot.send_location(peer, latitude=msg.location.latitude, longitude=msg.location.longitude)
    else:
        await update.effective_chat.send_message("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω.")

# ====== MAIN ======
async def main():
    if not TOKEN:
        raise SystemExit("–ù–µ—Ç TELEGRAM_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    global redis
    redis = Redis.from_url(REDIS_URL, decode_responses=True)

    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("find", find_cmd))
    app.add_handler(CommandHandler("next", next_cmd))
    app.add_handler(CommandHandler("stop", stop_cmd))
    app.add_handler(CommandHandler("rules", rules))
    app.add_handler(CommandHandler("stats", stats))

    # –ö–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(cb))

    # –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ª—é–±—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, # –ó–∞–ø—É—Å–∫ (PTB v20)
    await app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    asyncio.run(main())  